#!/bin/ksh
#
# Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
# Copyright (c) 2020, Dynamic Systems Inc.
#
#

# This script provides a simple GUI for managing labeled zones.
# It provides contextual menus which provide appropriate choices.
# It must be run in the global zone as root.

# These arguments are accepted, and will result in non-interactive
# (text-only) mode:
#
#	txzonemgr [-c | -d[f]| -Z <file>]
#
#	-c	create default zones
#	-d	destroy all zones; prompts for confirmation unless
#		the -f flag is also specified
#	-f	force
#	-Z	create zones using list in specified file
#
# 11.4 workaround to load the trusted-destkop package
#
BRANDS=/usr/lib/brand/solaris
grep trusted-desktop $BRANDS/pkgcreatezone > /dev/null 2>&1
if [ $? != 0 ]; then
        (cd $BRANDS; patch -p0 < pkgcreatezone.patch)
fi

#
# 11.4 workaround to avoid mount failures when cloning zones
#
BRANDL=/usr/lib/brand/labeled
if [ -f $BRANDL/common.ksh-tx ]; then
	mv $BRANDL/common.ksh $BRANDL/common.ksh.orig
	mv $BRANDL/common.ksh-tx $BRANDL/common.ksh
fi

PATH=/usr/bin:/usr/sbin:/usr/lib export PATH
. /usr/lib/brand/labeled/common.ksh

TEXTDOMAIN=solaris_cmd_tsol
export TEXTDOMAIN

# DISP - use GUI (otherwise use non-interactive mode)
DISP=1
# CREATEDEF - make default zones (non-interactive)
CREATEDEF=0
# DESTROYZONES - tear down all zones (non-interactive)
DESTROYZONES=0
# FORCE - force
FORCE=0
# ZONELIST - create zones using list in  specified file
ZONELIST=

NSCD_PER_LABEL=0
if [ -f $NSCD_INDICATOR ] ; then
	NSCD_PER_LABEL=1
fi

myname=$(basename $0)

TXTMP=/tmp/txzonemgr
PUBZONE=public
INTZONE=internal
SNAPSHOT=snapshot

title="Labeled Zone Manager 2.3"

msg_defzones=$(gettext "Create default zones using default settings?")
msg_confirmkill=$(gettext "OK to destroy all zones?")
msg_continue=$(printf "$(gettext "(exit to resume %s when ready)")" "$(basename $0)")
msg_getlabel=$(gettext "Select a label for the")
msg_getremote=$(gettext "Select a remote host or network from the list below:")
msg_getnet=$(gettext "Select a network configuration from the list below:")
msg_getzone=$(gettext "Select a zone from the list below:
(select global for zone creation and shared settings)")
msg_getcmd=$(gettext "Select a command from the list below:")
msg_getmin=$(gettext "Select the minimum network label for the")
msg_getmax=$(gettext "Select the maximum network label for the")
msg_badip=$(gettext " is not a valid IP address")
msg_getIPaddrOrDHCP=$(gettext "Enter hostname, 'dhcp', or IP address/[prefix length]:")
msg_getIPaddr=$(gettext "Enter hostname or IP address/[prefix length]:")
msg_getHostforIP=$(gettext "Enter hostname for ")
msg_getInterface=$(gettext "Select an interface from the list below:")


process_options()
{
	typeset opt optlist

	optlist='cdfZ:'

	while getopts "$optlist" opt
	do
		case $opt in
		c)	CREATEDEF=1
			DISP=0
			;;
		d)	DESTROYZONES=1
			DISP=0
			;;
		f)	FORCE=1
			;;
		Z)	ZONELIST=$OPTARG
			if [ ! -f $ZONELIST ]; then
				printf "$(gettext "invalid file name -%s\n")" "$ZONELIST"
				usage
				return 2
			fi
			DISP=0
			;;
		*)	printf "$(gettext "invalid option -%s\n")" "$OPTARG"
			usage
			return 2
			;;
		esac
	done

	if [[ $ZONELIST ]]; then
		if [ $CREATEDEF -eq 1 \
		    -o $DESTROYZONES -eq 1 \
		     -o $FORCE -eq 1 ] ; then
			gettext "cannot combine -Z  with other options\n"
			usage
			return 2
		fi
	fi
	if [ $CREATEDEF -eq 1 -a $DESTROYZONES -eq 1 ] ; then
		gettext "cannot combine options -c and -d\n"
		usage
		return 2
	fi
	if [ $CREATEDEF -eq 1 -a $FORCE -eq 1 ] ; then
		gettext "option -f not allowed with -c\n"
		usage
		return 2
	fi
	if [ $FORCE -eq 1 -a $CREATEDEF -eq 0 -a $DESTROYZONES -eq 0 ] ; then
		gettext "option -f specified without any other options\n"
		usage
		return 2
	fi

	shift $((OPTIND - 1))
	if [ "x$1" != "x" ] ; then
		usage
		return 2
	fi

	return 0
}

usage() {
	printf "$(gettext "usage: %s [-c | -d[f] | -Z <file>]\n")" "$myname"
}

consoleCheck() {
	if [ $ZONENAME != global ] ; then
		zconsole=$(pgrep -f "zlogin -C $ZONENAME")
		if [ $? != 0 ] ; then
			console="Zone Console...\n"
		fi
	fi
}

labelCheck() {
	curlabel=$(tncfg -z $ZONENAME info label 2>/dev/null)
	if [[ $curlabel ]] ; then
		curlabel=$(echo $curlabel|cut -f2 -d=)
		hexlabel=$(atohexlabel "${curlabel}")
		label=
		if [ $ZONENAME = global ] ; then
			addcipsohost="Add Multilevel Access to Remote Host...\n"
			removecipsohost="Remove Multilevel Access to Remote Host...\n"
			addauthohost="Add Adaptive Access for Remote Host...\n"
			removeauthohost="Remove Adaptive Access for Remote Host...\n"
			mlpType=both
			setmlps="Configure Multilevel Ports...\n"
		else
			addcipsohost=
			removecipsohost=
			setmlps=
			ipType=$(zonecfg -z $ZONENAME info ip-type|cut -d" " -f2)
			if [ $zonestate = configured -o \
			    $zonestate = installed  ] ; then
				setmlps="Configure Multilevel Ports...\n"
				net=$(zonecfg -z $ZONENAME info net)
				if [ $ipType = exclusive ] ; then
					net=$(zonecfg -z $ZONENAME info anet)
					mlpType=private
				elif [[ -n $net ]] ; then
					mlpType=both
				else
					mlpType=shared
				fi
				addnet="Configure Network Interfaces...\n"
			fi
		fi
		addremotehost="Add Single-level Access to Remote Host...\n"
		remotes=$(tncfg -S files -t $unlab_template info host 2>/dev/null)
		if [[ -n $remotes ]] ; then
			removeremotehost="Remove Single-level Access to Remote Host...\n"
		else
			removeremotehost=
		fi
	else
		label="Select Label...\n"
		addremotehost=
		removeremotehost=
		addcipsohost=
		removecipsohost=
		addauthohost=
		removeauthohost=
		setmlps=
	fi
}

cloneCheck() {
	set -A zonelist
	integer clone_cnt=0
	for p in $(zoneadm list -ip) ; do
		z=$(echo "$p"|cut -d : -f2)
		s=$(echo "$p"|cut -d : -f3)
		if [ $z = $ZONENAME ] ; then
			continue
		elif [ $s = "installed" ] ; then
			zonelist[clone_cnt]=$z
			clone_cnt+=1
		fi
	done
	if [ $clone_cnt -gt 0 ] ; then
		clone="Clone...\n"; \
	fi
}

relabelCheck() {
	macstate=$(zonecfg -z $ZONENAME info|grep win_mac_write)
	if [[ -n "$macstate" ]] ; then
		permitrelabel="Deny Relabeling\n"
	else
		permitrelabel="Permit Relabeling\n"
	fi
}

autobootCheck() {
	bootmode=$(zonecfg -z $ZONENAME info autoboot)
	if [[ $bootmode == 'autoboot: true' ]] ; then
		autoboot="Set Manual Booting\n"
	else
		autoboot="Set Automatic Booting\n"
	fi
}


zoneBootCheck() {

	ZONENAME=$1

	typeset -i got_milestone=0
	typeset -i current_count=0
	typeset -i max_minutes=10
	typeset -i sleep_interval=5

	typeset -i max_count=$(( 60 / sleep_interval * max_minutes ))

	printf "$(gettext "\nWaiting for zone %s initialization to complete ")" "$ZONENAME"

	while (( current_count < max_count && got_milestone == 0 )); do
		# Make sure zone is in multiuser state, otherwise, zlogin gives
		# back msg in sysout:
		# zlogin: login allowed only for running zones (snapshot is 'installed').
		zonestate=$(zoneadm -z $ZONENAME list -p | cut -d : -f 3)
		if [ $zonestate == running ] ; then
			# Check zone's svc:/milestone/multi-user:default service
			state=$(zlogin $ZONENAME svcs -Ho STATE svc:/milestone/multi-user:default 2>/dev/null)
			if [[ $? == 0 && $state == "online" ]]; then
				got_milestone=1
			fi
		fi

		if (( got_milestone == 0 )) ; then
			# sleep
			print -n "."
			current_count+=1
			sleep $sleep_interval
		fi
	done

	print ""

	if (( got_milestone == 0 )) ; then
		# Zone failed to reach multi-user milestone within max time
		printf "$(gettext "Zone $s FAILED to reach multi-user milestone in %s minutes.\n")" "$ZONENAME" "$max_minutes"
		printf "$(gettext "Please log into zone %s console to investigate.\n")" "$ZONENAME"
		return 1
	fi

	# Zone reached multi-user milestone within max time
	typeset -i time_used=$(( sleep_interval * current_count ))
	printf "$(gettext "Zone %s reached multi-user milestone in %s seconds.\n")" "$ZONENAME" "$time_used"

	return 0
}

newZone() { 
	if [[ ! -n $ZONENAME ]] ; then
		ZONENAME=$(zenity --entry \
		    --title="$title" \
		    --width=330 \
		    --entry-text="" \
		    --text="Enter Zone Name: " 2>/dev/null)

		if [[ ! -n $ZONENAME ]] ; then
			ZONENAME=global
			return
		fi
	fi
	zonecfg -z $ZONENAME "create -t SYStsoldef;\
		     set zonepath=/zone/$ZONENAME"
}

removeZoneBEs() {
	zfs list -H $ZDSET/$ZONENAME 1>/dev/null 2>&1
	if [ $? = 0 ] ; then
		for zbe in $(zfs list -rHo name $ZDSET/$ZONENAME|grep \
			ROOT/*) ; do
			zfs destroy -rRf $zbe
		done
	fi
}

updateTemplate () {
	case $hostType in
	    "cipso")
		tncfg -S files -t $cipso_template "set host_type=cipso;\
		    set doi=1;\
		    set min_label=${minlabel};\
		    set max_label=${maxlabel}" ;;
	    "adaptive")
		tncfg -S files -t $adaptive_template "set host_type=adaptive;\
		    set doi=1;\
		    set min_label=${minlabel};\
		    set max_label=${maxlabel}" ;;
	    "unlabeled")
		tncfg -S files -t $unlab_template "set host_type=unlabeled;\
		    set doi=1;\
		    set min_label=${minlabel};\
		    set max_label=${maxlabel};\
		    set def_label=${hexlabel}" ;;
	    "netif")
		tncfg -S files -t $netif_template "set host_type=netif;\
		    set doi=1;\
		    set min_label=${hexlabel};\
		    set max_label=${hexlabel};\
		    set def_label=${hexlabel}" ;;
	esac
}

setTNdata () {
	err=$(echo n|tncfg -z $ZONENAME set label=$hexlabel 2>&1)
	if [ $? != 0 ] ; then
		if [ $DISP -eq 0 ]; then
			echo $err
			return 1
		else
			share=$(zenity --question \
			    --title="$title" \
			    --width=330 \
			    --text="$err" 2>/dev/null)
			if [ $? = 0 ]; then
				nic=auto
				createVNIC
				if [ $? = 0 ]; then
					tncfg -z $ZONENAME "set primary=no; \
					    set label=$hexlabel" 2>/dev/null
				else
					return 1
				fi
			else
				return 1
			fi
		fi
	fi
	#
	# Add matching entries in tnrhtp if necessary
	#
	minlabel=admin_low
	maxlabel=admin_high
	hostType=cipso
	updateTemplate

	hostType=unlabeled
	updateTemplate

	hostType=netif
	updateTemplate
	return 0
}

selectLabel() {
	hexlabel=$(tgnome-selectlabel \
		--title="$title" \
		--text="$msg_getlabel $ZONENAME zone:" \
		--min="${DEFAULTLABEL}"  \
		--default="${DEFAULTLABEL}"  \
		--max=$(chk_encodings -X) \
		--accredcheck=yes \
		--mode=sensitivity \
		--format=internal \
		2>/dev/null)
	if [ $? = 0 ] ; then
		setTNdata
		if [ $? -ne 0 ] ; then
			return 1
		fi
	fi	
}

getLabelRange() {
	deflabel=$(tncfg -S files -t $cipso_template info min_label|cut -d= -f2)
	minlabel=$(tgnome-selectlabel \
		--title="$title" \
		--text="$msg_getmin $ZONENAME zone:" \
		--min="admin_low" \
		--max="$hexlabel" \
		--default="$deflabel" \
		--accredcheck=no \
		--mode=sensitivity \
		--format=internal \
		2>/dev/null)
	[ $? != 0 ] && return
	
	deflabel=$(tncfg -S files -t $cipso_template info max_label|cut -d= -f2)
	maxlabel=$(tgnome-selectlabel \
		--title="$title" \
		--text="$msg_getmax $ZONENAME zone:" \
		--min="${minlabel}"  \
		--max="admin_high" \
		--default="$deflabel" \
		--accredcheck=no \
		--mode=sensitivity \
		--format=internal \
		2>/dev/null)
	[ $? != 0 ] && return

	hostType=cipso
	updateTemplate
}


encryptionValues() {
	echo $(zfs get 2>&1 | grep encryption | sed -e s/^.*YES// -e s/\|//g)
}

getPassphrase() {
	pass1=$(zenity --entry --title="$title" --text="Enter passphrase:" \
	    --width=330 --hide-text 2>/dev/null)
	pass2=$(zenity --entry --title="$title" --text="Re-enter passphrase:" \
	    --width=330 --hide-text 2>/dev/null)
	if [[ "$pass1" != "$pass2" ]]; then
		zenity --error --title="$title" \
			--text="Passphrases do not match" 2>/dev/null
		return ""
	fi
	file=$(mktemp)
	echo "$pass1" > $file
	echo "$file"
}

createZDSET() {
	options=$1
	pool=${2%%/*}

	# First check if ZFS encrytption support is available
	pversion=$(zpool list -H -o version $pool)
	cversion=$(zpool upgrade -v | grep Crypto | awk '{ print $1 }')
	if (( cversion == 0 || pversion < cversion )); then
		zfs create $options $ZDSET
		return
	fi

	encryption=$(zenity --list --title="$title" --height=320 \
		--text="Select cipher for encryption of all labels:" \
		--column="encryption" $(encryptionValues) 2>/dev/null)

	if [[ $? != 0 || $encryption == "off" ]]; then
		zfs create $options $ZDSET
		return
	fi

	format=$(zenity --list --title="$title" \
		--text "Select encryption key source:" \
		--column="Key format and location" \
		"Passphrase" "Generate Key in file" 2>/dev/null)
	[ $? != 0 ] && exit 

	if [[ $format == "Passphrase" ]]; then
		file=$(getPassphrase)
		if [[ $file == "" ]]; then
			exit
		fi
		keysource="passphrase,file://$file"
		removefile=1;
	elif [[ $format == "Generate Key in file" ]]; then
		file=$(zenity --file-selection \
			--title="$title: Location of key file" \
			--save --confirm-overwrite 2>/dev/null)
		[ $? != 0 ] && exit 
		if [[ $encryption == "on" ]]; then
			keylen=128
		else
			t=${encryption#aes-} && keylen=${t%%-*}
		fi
		pktool genkey keystore=file keytype=aes \
		    keylen=$keylen outkey=$file
		keysource="raw,file:///$file"
	fi

	options="$options -o encryption=$encryption -o keysource=$keysource"
	zfs create $options $ZDSET
	if (( removefile == 1 )); then
		zfs set keysource=passphrase,prompt $ZDSET
		rm $file
	fi
}

clone() {
	image=$1
	if [[ -z $image ]] ; then
		msg_clone=$(printf "$(gettext "Clone the %s zone using a
snapshot of one of the following halted zones:")" "$ZONENAME")
		image=$(zenity --list \
		    --title="$title" \
		    --text="$msg_clone" \
		    --height=300 \
		    --width=330 \
		    --column="Installed Zones" ${zonelist[*]} 2>/dev/null)
	fi

	if [[ -n $image ]] ; then
		removeZoneBEs
		zoneadm -z $ZONENAME clone $image
		zonestate=$(zoneadm -z $ZONENAME list -p | cut -d : -f 3)
		if [ $zonestate != installed ] ; then
			printf "$(gettext "error cloning zone %s.\n")" "$ZONENAME"
			return 1
		fi
	fi
}

install() {
	removeZoneBEs
	mkdir -p "$TXTMP/$ZONENAME"
	SCPROFILEDIR="$TXTMP/$ZONENAME/tx_profiles"
	rm -rf "$SCPROFILEDIR"
	mkdir "$SCPROFILEDIR"
	create_profile_dir system "$SCPROFILEDIR"
	if [ $DISP -eq 0 ] ; then
		printf "$(gettext "installing zone %s ...\n")" "$ZONENAME"
		zoneadm -z $ZONENAME install -c "$SCPROFILEDIR"
	else
		# xterm is used because gnome-terminal doesn't
		# start a new process...
		xterm -T "$title: Installing $ZONENAME zone" \
		   -fa monaco -fs 11 \
		   -e "zoneadm -z $ZONENAME install -c $SCPROFILEDIR" 
	fi

	rm -rf "$TXTMP/$ZONENAME"

	zonestate=$(zoneadm -z $ZONENAME list -p | cut -d : -f 3)
	if [ $zonestate != installed ] ; then
		printf "$(gettext "error installing zone %s.\n")" "$ZONENAME"
		return 1
	fi
}

delete() {
	delopt=$*

	# if there is an entry for this zone in tnzonecfg, remove it
	# before deleting the zone.

	curlabel=$(tncfg -z $ZONENAME info label 2>/dev/null)
	if [[ $curlabel ]] ; then
		tncfg -z $ZONENAME delete -F 2>/dev/null
		tncfg -S files -t $unlab_template delete -F 2>/dev/null
		tncfg -S files -t $cipso_template delete -F 2>/dev/null
	fi
	zonecfg -z $ZONENAME delete -F
}

getAllZoneNICs(){
	integer az_cnt=0
	integer nic_cnt=0
	set -A nics $(ipadm show-addrprop -p zone -o addrobj,current)
	while (( nic_cnt < ${#nics[*]} )); do
		addrObj=${nics[nic_cnt]}
		nic_cnt+=1
		zoneType=${nics[nic_cnt]}
		nic_cnt+=1
		if [ $zoneType = all-zones ]; then
			aznics[az_cnt]=$addrObj
			az_cnt+=1
		fi
        done
}

getNetmask() {
	# first check if the user already specified it as a suffix

	if [[ -z $cidr ]]; then

		# if we don't have a netmask yet, ask the user

		cidr=$(zenity --entry \
		    --title="$title" \
		    --width=330 \
		    --text="$ipaddr: Enter prefix length: " 2>/dev/null)
		[ $? != 0 ] && return;
	fi
}

addZoneNet() {
	getIPaddr "${msg_getIPaddr}"
	if [[ -z $ipaddr ]] ; then
		return;
	fi
	getNetmask
	if [[ -z $cidr ]] ; then
		return;
	fi
	updateTnrhdb $cipso_template
	if [ $? != 0 ] ; then
		return 1
	fi
	zonecfg -z $ZONENAME "set ip-type=shared; \
	    add net; \
	    set address=${ipaddr}/${cidr}; \
	    set physical=$nic; \
	    end"
	ipType=shared
	updateHostname
}

updateHostname() {
	hostattr=$(zonecfg -z $ZONENAME info attr name=hostname 2>/dev/null)
	if [[ -n $hostattr ]]; then
		return
	fi
	if [[ ! -n $hostname ]]; then
		getent=$(getent hosts $ipaddr)
		if [ $? = 0 ]; then
			hostname=$(echo $getent|nawk '{print $2}')
		else
			hostname=$(zenity --entry \
			    --title="$title" \
			    --width=330 \
			    --text="$msg_getHostforIP ${ipaddr}:"  2>/dev/null)
			
			if [[ ! -n $hostname ]] ; then
				hostname=$ZONENAME
			fi
		fi
	fi
	zonecfg -z $ZONENAME "add attr; \
	    set name=hostname; \
	    set type=string; \
	    set value=$hostname; \
	    end"

	zoneHostnameChanged=1
}

updateTnrhdb() {
	if [[ -n $2 ]] ; then
		newipaddr="${ipaddr}/$2"
	else
		newipaddr="$ipaddr"
	fi
	err=$(tncfg -S files -t $1 add host="${newipaddr}" 2>&1)
	if [ $? != 0 ] ; then
		x=$(zenity --warning \
		    --title="$title" \
		    --text="$err" 2>/dev/null)
		return 1
	fi
	return
}

getIPaddr() {
        hostname=$(zenity --entry \
            --title="$title" \
	    --width=330 \
	    --text="${1}" 2>/dev/null)

	if [[ ! -n $hostname ]]; then
		ipaddr=
		return
	fi

	alpha=$(echo $hostname|grep ^[A-z]|grep -v :)
	if [[ ! -z $alpha ]]; then
		if [ $hostname = dhcp ]; then
			ipaddr=
			return
		fi
		ipaddr=$(getent hosts $hostname|head -1|nawk '{print $1}')
		if [[ -z $ipaddr ]] ; then
			ipaddr=$(zenity --entry \
			    --title="$title" \
			    --text="Enter IP address for ${hostname}: " 2>/dev/null)
			[ $? != 0 ] && return
		fi
	else
		# hostname is numeric so treat as IP address
		ipaddr=$hostname
		hostname=
	fi
	cidr=$(echo $ipaddr|grep /|cut -f2 -d/)
	if [[ -n $cidr ]]; then
		# remove the optional cidr suffix
		# which is input to getNetmask()

		ipaddr=$(echo $ipaddr|cut -f1 -d/)
	fi

	err=$(tncfg test host=$ipaddr  2>&1)
	if [ $? != 0 ]; then
		x=$(zenity --error \
		    --title="$title" \
		    --text="$err" 2>/dev/null)
		ipaddr=
	fi
}

createInstance() {
	integer inst_cnt=0

	persistent=$(ipadm show-if -po persistent $nic)
	if [[ $persistent == *4* ]]; then
		tempFlag=
	else
		tempFlag=-t
	fi
	getIPaddr "${msg_getIPaddr}"
	if [[ -n $hostname ]]; then
		if [ $hostname = dhcp ]; then
			nic="${nic}/v4dhcp"
			ipadm create-addr $tempFlag -T dhcp $nic
			svcadm restart network/service
			return
		fi
	fi
        if [[ -z $ipaddr ]] ; then
               return;
	fi
	if [[ $ipaddr == *:* ]]; then
		instance=v6static
	else
		instance=v4static
	fi
	getNetmask
	while (( 1 )) do
		x=$(ipadm show-addr ${nic}/${instance}$inst_cnt 2>/dev/null)
		if [ $? = 1 ]; then
			nic="${nic}/${instance}$inst_cnt"
			break
		else
			inst_cnt+=1
		fi
	done
	updateTnrhdb $cipso_template
	if [ $? != 0 ] ; then
		return
	fi
	if [[ -n $hostname ]]; then
		grep -w $hostname /etc/inet/hosts >/dev/null
		if [ $? -eq 1 ] ; then
			print "$ipaddr\t$hostname" >> /etc/inet/hosts
		fi
	fi
	msg=$(ipadm create-addr $tempFlag -T static -a local=${ipaddr}/$cidr $nic 2>&1)
	if [ $? = 1 ]; then
		$(zenity --info \
		    --title="$title" \
		    --text="$msg"  2>/dev/null)
	fi
}
		    
createVNIC() {
	if [ $ZONENAME == global ] ; then
		vnicname=$(zenity --entry \
		    --title="$title" \
		    --width=330 \
		    --entry-text="" \
		    --text="Enter VNIC Name: " 2>/dev/null)

		if [[ -z $vnicname ]] ; then
			return 1
		fi
                dladm show-vnic $vnicname >/dev/null 2>&1 ||
                    dladm create-vnic -l $nic $vnicname
		ipadm create-ip $vnicname
		nic=$vnicname
	else
		getIPaddr "${msg_getIPaddrOrDHCP}"
		if [[ -n $hostname ]]; then
			if [ $hostname = dhcp ]; then
				zonecfg -z $ZONENAME "set ip-type=exclusive;
				    add anet; \
				    set lower-link=$nic; \
				    end"
				zoneHostnameChanged=1
				return 0
			fi
		fi
		if [[ -z $ipaddr ]] ; then
			return 1
		fi
		getNetmask
		if [[ -z $cidr ]] ; then
			return 1
		fi
		updateTnrhdb $cipso_template
		if [ $? != 0 ] ; then
			return 1
		fi
		zonecfg -z $ZONENAME "set ip-type=exclusive; \
		    add anet; \
		    set lower-link=$nic; \
		    set allowed-address=${ipaddr}/${cidr}; \
		    end"
		ipType=exclusive
		updateHostname
	fi
	return 0
}

shareInterface() {
	persistent=$(ipadm show-addr -po persistent $nic)
	if [[ $persistent == *U* ]]; then
		tempFlag=
	else
		tempFlag=-t
	fi
	err=$(ipadm set-addrprop $tempFlag -p zone=$1 $nic 2>&1)
	if [ $? != 0 ] ; then
		if [ "$err" != "ipadm: set-addrprop: zone: Invalid argument provided" ] ; then
			x=$(zenity --warning \
			    --title="$title" \
			    --text="$err" 2>/dev/null)
		fi
	fi
	sleep 1
}

addTnrhdb() {
	getIPaddr "${msg_getIPaddr}"
        if [[ -z $ipaddr ]] ; then
               return;
	fi
	updateTnrhdb $1 $cidr
}
	
removeTnrhdb() {
	while (( 1 )) do
		remotes=$(tncfg -S files -t $1 info host 2>/dev/null)
		if [ $? == 1 ]; then
			return;
		fi
		remotes=$(echo $remotes|sed 's/host=//g')
		if [ $1 = cipso ] ; then
			templateHeading="Remove Multilevel Access to:"
		elif [ $1 = adaptive ] ; then
			templateHeading="Remove Adaptive Access for:"
		else
			templateHeading="Remove Single-level Access by $ZONENAME Zone"
		fi
		if [[ -n $remotes ]] ; then
			ipaddr=$(zenity --list \
			    --title="$title" \
			    --text="$msg_getremote" \
			    --height=250 \
			    --width=300 \
			    --column="${templateHeading}" \
			    $remotes 2>/dev/null)

			if [[ -n $ipaddr ]] ; then
				tncfg -S files -t $1 remove host=${ipaddr}
			else
				return
			fi
		else
			return
		fi
	done
}

manageMLPs () {
	integer mlp_cnt
	integer mlpOp_cnt
	integer type_cnt

	cmds[0]="Add MLP"
	cmds[1]="Delete MLP"

	types[0]="private"
	types[1]="shared"

	while (( 1 )) do
		mlp_cnt=0
		set -A mlpOps
		mlpOps[0]="0\nSet Label Range\n${types[0]}\nany\n..."
		mlpOp_cnt=1
		case $1 in
		    "private")
			type_cnt=0
			type_limit=1
			;;
		    "shared")
			type_cnt=1
			type_limit=2
			;;
		    "both")
			type_cnt=0
			type_limit=2
			;;
		esac
		while (( type_cnt < type_limit )); do
			mlpOps[mlpOp_cnt]="\n$mlpOp_cnt\n${cmds[0]}\n${types[type_cnt]}\ntcp\n..."
			mlpOp_cnt+=1

			mlpOps[mlpOp_cnt]="\n$mlpOp_cnt\n${cmds[0]}\n${types[type_cnt]}\nudp\n..."
			mlpOp_cnt+=1

			set -A mlps $(tncfg -z $ZONENAME info mlp_${types[type_cnt]}|cut -f2 -d=)

			while (( mlp_cnt < ${#mlps[*]} )); do
				mlp=$(echo ${mlps[mlp_cnt]}|cut -f1 -d/)
				proto=$(echo ${mlps[mlp_cnt]}|cut -f2 -d/)

				mlpOps[mlpOp_cnt]="\n$mlpOp_cnt\n${cmds[1]}\n${types[type_cnt]}\n${proto}\n${mlp}"
				mlpOp_cnt+=1
				mlp_cnt+=1
			done
			mlp_cnt=0
			type_cnt+=1
		done

		msg1="zone = ${ZONENAME}"
		msg2=$(tncfg -S files -t $cipso_template info min_label)
		msg3=$(tncfg -S files -t $cipso_template info max_label)
		mlpOp=$(print "${mlpOps[*]}"|zenity --list \
		    --title="$title" \
		    --text="${msg1}\n${msg2}\n${msg3}\n${msg_getcmd}" \
		    --height=300 \
		    --width=400 \
		    --column="#" \
		    --column="Command" \
		    --column="MLP Type" \
		    --column="Protocol" \
		    --column="Port(s)" \
		    --hide-column=1 2>/dev/null
		)
		
		# User picked cancel or no selection
		if [[ -z $mlpOp ]] ; then
			return
		fi

		if [ $mlpOp = 0 ]; then
			getLabelRange
			continue
		else
			cmd=$(print "${mlpOps[$mlpOp]}"|tr '\n' ';' |cut -d';' -f 3)
			type=$(print "${mlpOps[$mlpOp]}"|tr '\n' ';' |cut -d';' -f 4) 
			proto=$(print "${mlpOps[$mlpOp]}"|tr '\n' ';' |cut -d';' -f 5) 
			mlp=$(print "${mlpOps[$mlpOp]}"|tr '\n' ';' |cut -d';' -f 6) 
		fi
		case $cmd in
		    ${cmds[0]} )
			mlp=$(zenity --entry \
			    --title="$title" \
			    --width=330 \
			    --entry-text="" \
			    --text="Enter $type MLP (port[-port2]):" 2>/dev/null)

			if [[ ! -n $mlp ]] ; then
				return
			else
				err=$(tncfg -z $ZONENAME add mlp_${type}=${mlp}/${proto} 2>&1)
				if [ $? != 0 ] ; then
					x=$(zenity --error \
					    --title="$title" \
					    --text="$err" 2>/dev/null)
					return
				fi
			fi
			;;	
		    ${cmds[1]} )
			tncfg -z $ZONENAME remove mlp_${type}=${mlp}/${proto}
			;;
		esac
	done
}

# This routine is a toggle -- if we find it configured for global nscd,
# change to nscd-per-label and vice-versa.
#
# The user was presented with only the choice to CHANGE the existing
# configuration.

manageNscd() {
	if [ $NSCD_PER_LABEL -eq 0 ] ; then
		# this MUST be a regular file for svc-nscd to detect
		touch $NSCD_INDICATOR
		NSCD_OPT="Unconfigure per-zone name service"
		NSCD_PER_LABEL=1
		for i in $(zoneadm list -i | grep -v global) ; do
			zoneadm -z $i halt >/dev/null 2>&1
			labeled_unsharePasswd $i
			zonestate=$(zoneadm -z $i list -p | cut -d : -f 3)
			if [ $zonestate = installed ] ; then
				ZONENAME=$i
				
				# Use partial reconfiguration "users"
				labeled_reconfigure users --destructive
			fi
		done
		ZONENAME=global
	else
		rm -f $NSCD_INDICATOR
		NSCD_OPT="Configure per-zone name service"
		NSCD_PER_LABEL=0
		for i in $(zoneadm list -i | grep -v global) ; do
			zoneadm -z $i halt >/dev/null 2>&1
			labeled_sharePasswd $i
		done
	fi
}

manageZoneInterface() {
	if [ $ipType = exclusive ] ; then
		phys="linkname"
		netres="anet"
		address="allowed-address"
		setVlanID="Set vlan ID...\n"
		addIPaddr="Add IP Address\n"
		removeIPaddr="Remove IP Address\n"
	else
		phys="address"
		netres="net"
		address="address"
		setVlanID=
		addIPaddr=
		removeIPaddr=
	fi

	hostattr=$(zonecfg -z $ZONENAME info attr name=hostname 2>/dev/null)
	if [[ -n $hostattr ]]; then
		sethostname=
		hostname=$(echo $hostattr|cut -d" " -f7)
	else
		sethostname="Set hostname...\n"
		hostname=...
	fi
		
        integer nic_cnt=0
	integer row=0
        set -A nics
	set -A addrs
	set -A linknames
	set -A physicals
	set -A defrouters
	nets=$(zonecfg -z $ZONENAME info $netres |tr - _| grep -w ${phys}:|cut -d" " -f2)
	host=$hostname
	for i in $nets; do
		net=$(zonecfg -z $ZONENAME info $netres $phys=$i)
		net=$(echo $net|sed 's/ not specified/: .../g')
		labeled_parseNet $net
		addrs[row]="$ipaddr"
		physicals[row]="$physical"
		defrouters[row]="$defrouter"
		if [ $linkname == ... ]; then
			linkname=net$row
		fi
		linknames[row]="$linkname"
		nics[nic_cnt]="$row $linkname $physical $vlan_id $ipaddr $host $defrouter"
		host=...
                nic_cnt+=1
		row+=1
        done

	nic=$(zenity --list \
	    --title="$title" \
	    --text="Zone:$ZONENAME    IP-type: $ipType\n$msg_getInterface" \
	    --height=200 \
	    --width=700 \
	    --column="#" \
	    --hide-column=1 \
	    --column="Interface" \
	    --column="Physical" \
	    --column="vlan ID" \
	    --column="IP Address" \
	    --column="Host Name" \
	    --column="Default Router" \
	    ${nics[*]} \
	    $row "Add interface..."  2>/dev/null)

	if [[ -z $nic ]] ; then
		return
	fi

	if [ $nic == $row ] ; then
		integer nic_cnt=0

		if [ $ipType = exclusive ] ; then
			set -A nics $(dladm show-phys -po link;\
			    dladm show-etherstub -po link)
		else
			set -A nics $(ipadm show-if -po ifname,class|grep :ip$|cut -f1 -d:)
		fi
		while (( nic_cnt < ${#nics[*]} )); do
			err=$(tncfg -z $ZONENAME test physical=${nics[nic_cnt]} 2>&1)
			if [ $? == 1 ]; then
				nics[nic_cnt]=""
			fi
			nic_cnt+=1
		done
		nic=$(zenity --list \
		    --title="$title" \
		    --text="Zone:$ZONENAME    IP-type: $ipType\n$msg_getInterface" \
		    --height=200 \
		    --width=300 \
		    --column="Interface" \
		    ${nics[*]}  2>/dev/null)
		
		if [[ -z $nic ]] ; then
		# User picked cancel or no selection
			return
		elif [ $ipType = exclusive ] ; then
			createVNIC
		else
			addZoneNet
	   	fi 
		return
	fi

	addDefrouter="Add Default Router...\n"
	remove="Remove Interface\n"
	addAdaptive=
	removeAdaptive=

	primary=$(tncfg -z $ZONENAME info primary 2>/dev/null)
	if [ $primary = "primary=no" ]; then
		# Secondary zones must use previously
		# assigned anet interface
		if [ $nic_cnt == 1 ] ; then
			remove=
		fi
	fi

	addr=${addrs[$nic]}
	linkname=${linknames[$nic]}
	physical=${physicals[$nic]}
	defrouter=${defrouters[$nic]}

	# Allow removal of IP addresses if there is more than one
 
	set -A addrs $(echo $addr|sed 's/,/ /g')
	if (( ${#addrs[*]} < 2 )); then
		removeIPaddr=
	fi

	# Allow removal of default router  if there is more than one

	set -A defrouters $(echo $defrouter|sed 's/,/ /g')
	if (( ${#defrouters[*]} < 2 )); then
		removeDefrouter=
	else
		removeDefrouter="Remove Default Router...\n"
	fi

	integer addr_cnt=0
	while (( addr_cnt < ${#addrs[*]} )); do
		ipaddr=$(echo ${addrs[addr_cnt]}|cut -d/ -f1)
		err=$(tncfg -t $netif_template info host 2>/dev/null|grep =$ipaddr/)
		if [ $? == 0 ]; then
			removeAdaptive="Deny Adaptive Access\n"
			break
		fi
		addr_cnt+=1
	done
	if [[ -z $removeAdaptive ]]; then
		err=$(tncfg -t $netif_template test physical=$physical 2>&1)
		if [ $? == 0 ]; then
			addAdaptive="Allow Adaptive Access\n"
		fi
	fi
	command=$(print ""\
	    $addAdaptive \
	    $removeAdaptive \
	    $sethostname \
	    $addDefrouter \
	    $removeDefrouter \
	    $setVlanID \
	    $addIPaddr \
	    $removeIPaddr \
	    $remove \
	    | zenity --list \
	    --title="$title" \
	    --text="Select a command from the list below:" \
	    --height=300 \
	    --column="IP Address: $addr" 2>/dev/null)
	if  [[ -z $command ]]; then
		return
	fi

	integer addr_cnt=0
	case $command in
	    " Add IP Address")
		getIPaddr "${msg_getIPaddr}"
		if [[ -z $ipaddr ]] ; then
			return;
		fi
		getNetmask
		if [[ -z $cidr ]] ; then
			return;
		fi
		zonecfg -z $ZONENAME "\
		    select $netres linkname=$linkname;\
		    set allowed-address=${addr},${ipaddr}/$cidr;\
		    end"
		updateTnrhdb $cipso_template
		if [[ -n $removeAdaptive ]]; then
			tncfg -S files -t $netif_template add host=${ipaddr} 1>/dev/null 2>&1
		fi
		;;
	    " Remove IP Address")
		set -A addr_row
		while (( addr_cnt < ${#addrs[*]} )); do
			addr_row[addr_cnt]="$addr_cnt ${addrs[addr_cnt]}"
			addr_cnt+=1
		done
		row=$(zenity --list \
		    --title="$title" \
		    --text="Interface: $linkname" \
		    --height=250 \
		    --width=250 \
		    --column="Row" \
		    --column="IP Addresses" \
		    --hide-column=1 \
		    ${addr_row[*]} 2>/dev/null)
		
		if [[ -z $row ]]; then
			return
		fi
		# Remove the selected IP address
		ipaddr=$(echo ${addrs[row]}|cut -d/ -f1)
		tncfg -S files -t $cipso_template remove host=${ipaddr} 1>/dev/null 2>&1
		if [[ -n $removeAdaptive ]]; then
			tncfg -S files -t $netif_template remove host=${ipaddr} 1>/dev/null 2>&1
		fi
		addrs[row]=""
		zonecfg -z $ZONENAME "\
		    select $netres linkname=$linkname;\
		    set allowed-address=$(echo ${addrs[*]}|sed 's/ /,/g');\
		    end"
		;;
	    " Allow Adaptive Access")
		while (( addr_cnt < ${#addrs[*]} )); do
			addr=$(echo ${addrs[addr_cnt]}|cut -d/ -f1)
			tncfg -S files -t $netif_template add host=${addr} 1>/dev/null 2>&1
			addr_cnt+=1
		done
		;;
	    " Deny Adaptive Access")
		while (( addr_cnt < ${#addrs[*]} )); do
			addr=$(echo ${addrs[addr_cnt]}|cut -d/ -f1)
			tncfg -S files -t $netif_template remove host=${addr} 1>/dev/null 2>&1
			addr_cnt+=1
		done
		;;
	    " Set hostname...")
		hostname=$(zenity --entry \
		    --title="$title" \
		    --width=330 \
		    --text="$msg_getHostforIP ${addr}:"  2>/dev/null)
		
		if [[ ! -n $hostname ]] ; then
			hostname=$ZONENAME
		fi
		zonecfg -z $ZONENAME "add attr; \
		    set name=hostname; \
		    set type=string; \
		    set value=$hostname; \
		    end"
		zoneHostnameChanged=1
		;;
	    " Add Default Router...")
		getIPaddr "${msg_getIPaddr}"
		if [[ -z $ipaddr ]] ; then
			return;
		fi
		if [ $defrouter != ... ]; then
			ipaddr=$defrouter,$ipaddr
		fi
		zonecfg -z $ZONENAME "\
		    select $netres $address=${addr};\
		    set defrouter=${ipaddr};
		    end"
		;;
	    " Remove Default Router...")
		set -A addr_row
		while (( addr_cnt < ${#defrouters[*]} )); do
			addr_row[addr_cnt]="$addr_cnt ${defrouters[addr_cnt]}"
			addr_cnt+=1
		done
		row=$(zenity --list \
		    --title="$title" \
		    --text="Interface: $linkname" \
		    --height=250 \
		    --width=250 \
		    --column="Row" \
		    --column="Default Routers" \
		    --hide-column=1 \
		    ${addr_row[*]} 2>/dev/null)
		
		if [[ -z $row ]]; then
			return
		fi
		# Remove the selected default router
		defrouters[row]=""
		zonecfg -z $ZONENAME "\
		    select $netres linkname=$linkname;\
		    set defrouter=$(echo ${defrouters[*]}|sed 's/ /,/g');\
		    end"
		;;
	    " Remove Interface")
		if [ $ipType = exclusive ] ; then
			zonecfg -z $ZONENAME "\
			    remove $netres linkname=${linkname}"
		else
			zonecfg -z $ZONENAME "\
			    remove $netres $address=${addr}"
		fi
		if [ $nic_cnt == 1 ] ; then
			zonecfg -z $ZONENAME "\
			    set ip-type=shared;\
			    remove attr name=hostname"
			zoneHostnameChanged=1
			nic=
		fi
		while (( addr_cnt < ${#addrs[*]} )); do
			addr=$(echo ${addrs[addr_cnt]}|cut -d/ -f1)
			tncfg -S files -t $cipso_template remove host=${addr} 1>/dev/null 2>&1
			tncfg -S files -t $netif_template remove host=${addr} 1>/dev/null 2>&1
			addr_cnt+=1
		done
		;;
	    " Set vlan ID...")
		vlan_id=$(zenity --entry \
		    --width=300 \
		    --title="$title" \
		    --text="Enter vlan ID: " 2>/dev/null)
			
		if [[ -n $vlan_id ]] ; then
			zonecfg -z $ZONENAME "\
			    select $netres $address=${addr};\
			    set vlan-id=$vlan_id;
			    end"
		fi
		;;
	esac
}

manageZoneNets () {
	zoneHostnameChanged=0
	while (( 1 )) do
	if [[ -n $net ]] ; then
		manageZoneInterface
		if [[ -z $nic ]] ; then
			break
		fi
	else
		ncmds[0]="Only use all-zones IP instances"
		ncmds[1]="Add an IP instance"
		ncmds[2]="Add a virtual interface (VNIC)"

		getAllZoneNICs
		netOps[0]="1\n${ncmds[0]}\nShared Stack\n${aznics[*]}"

		integer nic_cnt=0
		integer netOp_cnt=2

# For zones using shared ip-type net resources are created as logical instances
# so the physical interface must be plumbed in the global zone. Therefore we use
# ipadm to get the available interface list.

		stack="Shared Stack"
		set -A nics $(ipadm show-if -po ifname,class|grep :ip$|cut -f1 -d:)
		while (( nic_cnt < ${#nics[*]} )); do
			err=$(tncfg -z $ZONENAME test physical=${nics[nic_cnt]} 2>&1)
			if [ $? == 1 ];then
				nic_cnt+=1
				continue
			fi

			netOps[netOp_cnt-1]="\n$netOp_cnt\n${ncmds[1]}\n$stack\n${nics[nic_cnt]}"
			netOp_cnt+=1
			nic_cnt+=1
		done


# For zones using exclusive ip-type anet resources are created as VNICs
# so the physical interface must be an ethernet datalink or an ether stub.
# Therefore we use dladm to get the available datalink list.

		integer nic_cnt=0
		stack="Exclusive Stack"
		set -A nics $(dladm show-phys -po link;\
		    dladm show-etherstub -po link)
		while (( nic_cnt < ${#nics[*]} )); do
			err=$(tncfg -z $ZONENAME test physical=${nics[nic_cnt]} 2>&1)
			if [ $? == 1 ];then
				nic_cnt+=1
				continue
			fi

			netOps[netOp_cnt-1]="\n$netOp_cnt\n${ncmds[2]}\n$stack\n${nics[nic_cnt]}"
			netOp_cnt+=1
			nic_cnt+=1
		done

		netOp=$(print "${netOps[*]}"|zenity --list \
		    --title="$title" \
		    --text="Zone:$ZONENAME\n$msg_getnet" \
		    --height=300 \
		    --width=500 \
		    --column="#" \
		    --column="Network Configuration " \
		    --column="IP Type" \
		    --column="Available Interfaces" \
		    --hide-column=1 2>/dev/null
		)
		
		# User picked cancel or no selection
		if [[ -z $netOp ]] ; then
			break
		fi

		# All-zones is the default, so just return
		if [ $netOp = 1 ] ; then
			break
		fi

		cmd=$(print "${netOps[$netOp - 1]}"|tr '\n' ';' |cut -d';' -f 3)
		nic=$(print "${netOps[$netOp - 1]}"|tr '\n' ';' |cut -d';' -f 5) 
		case $cmd in
		    ${ncmds[1]} )
			addZoneNet;;
		    ${ncmds[2]} )
			createVNIC ;;
		esac
	fi
	if [ $ipType = exclusive ] ; then
		net=$(zonecfg -z $ZONENAME info anet)
	else
		net=$(zonecfg -z $ZONENAME info net)
	fi
	done

	# Zone hostname changed.
	if [ $zoneHostnameChanged = 1 -a $zonestate = installed ]; then
		# Use partial reconfiguration "identity" for hostname
		labeled_reconfigure "identity"
	fi
}

manageInterface () {
	# Clear list of commands

	share=
	newlogical=
	newvnic=
	unplumb=
	bringup=
	bringdown=

	if [[ $nic == */* ]]; then
		linktype=logical
	else
		linktype=$(dladm show-link -po class $nic)
	fi

	case $linktype in
	phys )
		newlogical="Create IP Instance...\n";
		newvnic="Create Virtual Interface (VNIC)...\n";
		unplumb="Remove Physical Interface\n" ;
		column="Interface: $nic"
		;;
	logical )
		unplumb="Remove IP Instance\n"
		state=$(ipadm show-addr -po state $nic)
		column="IP Instance: $nic"
		if [ $state = down ] ; then
			bringup="Bring Up\n"
		else
			bringdown="Bring Down\n"
		fi
		zone=$(ipadm show-addrprop -cp zone -o current $nic)
		if [[ -z $zone ]] ; then
			share="Share with Shared-IP Zones\n"
		elif [ $zone != all-zones ] ; then
			share="Share with Shared-IP Zones\n"
		else 
			share="Remove from Shared-IP Zones\n"
		fi
		;;
	vnic )
		newlogical="Create IP Instance...\n";
		unplumb="Remove Virtual Interface\n" ;
		column="Virtual Interface: $nic"
		;;
	etherstub )
		newvnic="Create Virtual Interface (VNIC)...\n";
		column="Interface: $nic"
		;;
	esac


	command=$(print ""\
	    $share \
	    $newlogical \
	    $newvnic \
	    $unplumb \
	    $bringup \
	    $bringdown \
	    | zenity --list \
	    --title="$title" \
	    --text="Select a command from the list below:" \
	    --height=300 \
	    --column="$column" 2>/dev/null)

	case $command in
	    " Create IP Instance...")
		createInstance;;
	    " Create Virtual Interface (VNIC)...")
		createVNIC ;;	
	    " Share with Shared-IP Zones")
		shareInterface all-zones;;
	    " Remove from Shared-IP Zones")
		shareInterface global;;
	    " Remove IP Instance")
		addr=$(ipadm show-addr -po addr $nic|cut -d/ -f1)
		shareInterface global
		ipadm delete-addr $nic
		tncfg -S files -t $cipso_template remove host=${addr} 1>/dev/null 2>&1
		;;
	    " Remove Physical Interface")
		ipadm delete-ip $nic
		;;
	    " Remove Virtual Interface")
		ipadm delete-ip $nic
		dladm delete-vnic $nic;;
	    " Bring Up")
		ipadm up-addr -t $nic;;
	    " Bring Down")
		ipadm down-addr -t $nic;;
	    *) return;;
	esac
}

manageNets() {
	while ((1)) do
		integer cnt=0
		set -A  objs
		i=$(ipadm show-if -po ifname;dladm show-etherstub -po link)
		a=$(ipadm show-addrprop -co addrobj|uniq)
		nl=""
		for j in $(echo $i $a|tr " " \\n|sort); do
			if [[ $j == lo0* ]]; then
				continue
			elif [[ $j == tun* ]]; then
				continue
			elif [[ $j == */* ]]; then
				addr=$(ipadm show-addr -po addr $j 2>/dev/null)
				if [[ ! -n $addr ]]; then
					continue
				fi
				state=$(ipadm show-addr -po state $j)
				type=$(ipadm show-addr -po type $j)
				zone=$(ipadm show-addrprop -cp zone -o current $j 2>/dev/null)
				if [[ -z $zone ]]; then
					shared=No
				elif [ $zone == all-zones ]; then
					shared=Yes
				else
					shared=No
				fi

				objs[cnt]="$nl$j\n$type\n$addr\n$shared\n$state"
			else
				class=$(ipadm show-if -po class $j 2>/dev/null)
				if [[ -n $class && $class == ipmp ]]; then
					continue
				fi
				state=$(dladm show-link -po state $j)
				class=$(dladm show-link -po class $j)
				if [ $class = vnic ]; then
					over=$(dladm show-link -po over $j)
					class="$class over $over"
				fi
				objs[cnt]="$nl$j\n$class\n...\n...\n$state"
			fi
			nl="\n"
			cnt+=1
		done
		nic=$(print "${objs[*]}"|zenity --list \
		    --title="$title" \
		    --text="Zone:$ZONENAME\n$msg_getInterface" \
		    --height=300 \
		    --width=570 \
		    --column="Interface" \
		    --column="Type" \
		    --column="IP Address" \
		    --column="All Zones" \
		    --column="State" 2>/dev/null)

		if [[ -z $nic ]] ; then
			return
		fi
		manageInterface
	done
}

createLDAPclient() {
	ldaptitle="$title: Create LDAP Client"
	ldapdomain=$(zenity --entry \
	    --width=400 \
	    --title="$ldaptitle" \
	    --text="Enter Domain Name: " 2>/dev/null)
	if [[ -n $ldapdomain ]] ; then
	ldapserver=$(zenity --entry \
	    --width=400 \
	    --title="$ldaptitle" \
	    --text="Enter Hostname of LDAP Server: " 2>/dev/null)
	else
		return
	fi
	if [[ -n $ldapserver ]] ; then
	ldapserveraddr=$(zenity --entry \
	    --width=400 \
	    --title="$ldaptitle" \
	    --text="Enter IP address of LDAP Server $ldapserver: " 2>/dev/null)
	else
		return
	fi
	ldappassword=""
	while [[ -z ${ldappassword} || "x$ldappassword" != "x$ldappasswordconfirm" ]] ; do
	    ldappassword=$(zenity --entry \
		--width=400 \
		--title="$ldaptitle" \
		--hide-text \
		--text="Enter LDAP Proxy Password:" 2>/dev/null)
	    ldappasswordconfirm=$(zenity --entry \
		--width=400 \
		--title="$ldaptitle" \
		--hide-text \
		--text="Confirm LDAP Proxy Password:" 2>/dev/null)
	done
	ldapprofile=$(zenity --entry \
	    --width=400 \
	    --title="$ldaptitle" \
	    --text="Enter LDAP Profile Name: " 2>/dev/null)
	whatnext=$(zenity --list \
	    --width=400 \
	    --height=250 \
	    --title="$ldaptitle" \
	    --text="Proceed to create LDAP Client?" \
	    --column=Parameter --column=Value \
	    "Domain Name" "$ldapdomain" \
	    "Hostname" "$ldapserver" \
	    "IP Address" "$ldapserveraddr" \
	    "Password" "$(print "$ldappassword" | sed 's/./*/g')" \
	    "Profile" "$ldapprofile" 2>/dev/null)
	[ $? != 0 ] && return

	grep "^${ldapserveraddr}[^0-9]" /etc/hosts > /dev/null
	if [ $? -eq 1 ] ; then
		print "$ldapserveraddr $ldapserver" >> /etc/hosts
	fi

	tncfg -S files -t cipso add host=${ldapserveraddr} 1>/dev/null 2>&1

	proxyDN=$(print $ldapdomain|awk -F"." \
	    "{ ORS = \"\" } { for (i = 1; i < NF; i++) print \"dc=\"\\\$i\",\" }{ print \"dc=\"\\\$NF }")

	zenity --info \
	    --title="$ldaptitle" \
	    --width=500 \
	    --text="global zone will be LDAP client of $ldapserver" 2>/dev/null

	ldapout=$TXTMP/ldapclient.$$

	ldapclient init -a profileName="$ldapprofile" \
	    -a domainName="$ldapdomain" \
	    -a proxyDN"=cn=proxyagent,ou=profile,$proxyDN" \
	    -a proxyPassword="$ldappassword" \
	    "$ldapserveraddr" >$ldapout 2>&1

	if [ $? -eq 0 ] ; then
	    ldapstatus=Success
	else
	    ldapstatus=Error
	fi

	zenity --text-info \
	    --width=700 \
	    --height=300 \
	    --title="$ldaptitle: $ldapstatus" \
	    --filename=$ldapout 2>/dev/null

	rm -f $ldapout


}

tearDownZones() {
	if [ $DISP -eq 0 ] ; then
		if [ $FORCE -eq 0 ] ; then
			gettext "OK to destroy all zones [y|N]? "
			read ans
			printf "%s\n" "$ans" \
			    | /usr/xpg4/bin/grep -Eq "$(locale yesexpr)"
			if [ $? -ne 0 ] ; then
				gettext "canceled.\n"
				return 1
			fi
		fi
		gettext "destroying all zones ...\n"
	else
		killall=$(zenity --question \
		    --title="$title" \
		    --width=330 \
		    --text="$msg_confirmkill" 2>/dev/null)
		if [ $? != 0 ]; then
			return
		fi
	fi

	for p in $(zoneadm list -cp|grep -v global:) ; do
		ZONENAME=$(echo "$p"|cut -d : -f2)
		if [ $DISP -eq 0 ] ; then
			printf "$(gettext "destroying zone %s ...\n")" "$ZONENAME"
		fi
		zoneadm -z $ZONENAME halt 1>/dev/null 2>&1
		zoneadm -z $ZONENAME uninstall -F 1>/dev/null 2>&1
		unlab_template="${ZONENAME}_unlab"
		cipso_template="${ZONENAME}_cipso"
		netif_template="${ZONENAME}_netif"
		delete -rRf
	done
	ZONENAME=global
}

createDefaultZones() {
	# If GUI display is not used, skip the dialog
	if [ $DISP -eq 0 ] ; then
		createDefaultPublic $PUBZONE $DEFAULTLABEL
		if [ $? -ne 0 ] ; then
			return 1
		fi
		zoneadm -z $PUBZONE halt
		createSnapshot $PUBZONE $SNAPSHOT
		if [ $? -ne 0 ] ; then
			gettext "Cannot continue to create zones. EXITING.\n"
			return 1
		fi
		zoneadm -z $PUBZONE boot
		createDefaultInternal $INTZONE
		return
	fi

	msg_choose1=$(gettext "Choose one:")
	defpub=$(printf "$(gettext "%s zone only")" "$PUBZONE")
	defboth=$(printf "$(gettext "%s and %s zones")" "$PUBZONE" "$INTZONE")
	defskip=$(gettext "Main Menu...")
	command=$(echo ""\
	    "$defpub\n" \
	    "$defboth\n" \
	    "$defskip\n" \
	    | zenity --list \
	    --title="$title" \
	    --text="$msg_defzones" \
	    --column="$msg_choose1" \
	    --height=400 \
	    --width=330  2>/dev/null)

	case $command in
	    " $defpub")
		createDefaultPublic $PUBZONE $DEFAULTLABEL
		if [ $? -ne 0 ] ; then
			return 1
		fi
		createSnapshot $PUBZONE $SNAPSHOT;;

	    " $defboth")
		createDefaultPublic $PUBZONE $DEFAULTLABEL
		if [ $? -ne 0 ] ; then
			return 1
		fi
		createSnapshot $PUBZONE $SNAPSHOT
		createDefaultInternal $INTZONE;;

	    *)
		return;;
	esac
}

createDefaultPublic() {
	ZONENAME=$1
	if [ $DISP -eq 0 ] ; then
		printf "$(gettext "creating default %s zone ...\n")" "$ZONENAME"
	fi
	newZone	
	zone_cnt+=1 
	hexlabel="$2"
	unlab_template="${ZONENAME}_unlab"
	cipso_template="${ZONENAME}_cipso"
	netif_template="${ZONENAME}_netif"
	setTNdata
	if [ $? -ne 0 ] ; then
		return 1
	fi
	install
	if [ $? -ne 0 ] ; then
		return 1
	fi

	if [ $DISP -eq 0 ] ; then
		printf "$(gettext "booting zone %s ...\n")" "$ZONENAME"
		zoneadm -z $ZONENAME boot
	else
		zoneadm -z $ZONENAME boot &
		# xterm is used because gnome-terminal doesn't
		# start a new process...
		xterm -T "Zone Console: $ZONENAME $msg_continue" \
		   -fa monaco -fs 11 \
		   -e "zlogin -C $ZONENAME"
	fi
}

createSnapshot() {

	if [ $DISP -eq 0 ] ; then
		# Check zone reached multi-user milstone online before clone it
		zoneBootCheck $1
		if [ $? -ne 0 ] ; then
			# Zone didn't reach multi-user milstone online.
			# Don't clone from it.  EXIT txzonemgr
			printf "$(gettext "Cannot clone zone %s from zone %s.\n")" "$2" "$1"
			return 1
		fi
	fi

	zoneadm -z $1 shutdown

	ZONENAME=$2
	newZone	
	zone_cnt+=1 
	zonecfg -z $ZONENAME "set autoboot=false;\
	    set ip-type=exclusive;\
	    add anet;\
	    set lower-link=auto;\
	    end"
	curlabel="$(tncfg -z $1 info label|cut -d= -f2)"
	tncfg -z $ZONENAME "set primary=no;\
	    set label=\"$curlabel\""
	clone $1
	zoneadm -z $1 boot &
}

createDefaultInternal() {
	ZONENAME=$1
	if [ $DISP -eq 0 ] ; then
		printf "$(gettext "creating default %s zone ...\n")" "$ZONENAME"
	fi
	newZone	
	zone_cnt+=1 

	hexlabel=$INTLABEL
	unlab_template="${ZONENAME}_unlab"
	cipso_template="${ZONENAME}_cipso"
	netif_template="${ZONENAME}_netif"
	setTNdata
	if [ $? -ne 0 ] ; then
		return 1
	fi

	clone $SNAPSHOT
	if [ $DISP -eq 0 ] ; then
		printf "$(gettext "booting zone %s ...\n")" "$ZONENAME"
	else
		gnome-terminal \
		    --title="Zone Console: $ZONENAME" \
		    --command "zlogin -C $ZONENAME" &
	fi
	zoneadm -z $ZONENAME boot &
}

createZones() {
	if [[ $(zoneadm list -c) == global ]] ; then
		clonefirst=1;
	else
		snapzone=$(zoneadm list -cp|grep ${SNAPSHOT}:)
		if [ $? -ne 0 ]; then
			printf "$(gettext "A %s zone is required\n")" "$SNAPSHOT"
			return 1
		else
			clonefirst=0;
		fi
	fi
	cat $ZONELIST|while read ZONENAME curlabel; do
		hexlabel=$(atohexlabel "$curlabel")
		if [ $clonefirst == 1 ] ; then
			createDefaultPublic $ZONENAME $hexlabel
			if [ $? -ne 0 ] ; then
				return 1
			fi
			createSnapshot $ZONENAME $SNAPSHOT
			if [ $? -ne 0 ] ; then
				gettext "Cannot continue to create zones. EXITING.\n"
				return 1
			fi
			clonefirst=0;
		else
			newZone	
			zone_cnt+=1 
			zonecfg -z $ZONENAME "set autoboot=false;
			    set limitpriv=default,!net_mac_aware"
			unlab_template="${ZONENAME}_unlab"
			cipso_template="${ZONENAME}_cipso"
			netif_template="${ZONENAME}_netif"
			setTNdata
			if [ $? -ne 0 ] ; then
				return 1
			fi
			clone $SNAPSHOT
		fi
	done
}

selectZone() {
	set -A zonelist "global running yes ADMIN_HIGH"
	integer zone_cnt=1

	for p in $(zoneadm list -cp|grep -v global:) ; do
		zone_cnt+=1
	done
	if [ $zone_cnt == 1 ] ; then
		createDefaultZones
	fi
	if [ $zone_cnt == 1 ] ; then
		ZONENAME=global
		singleZone
		return
	fi

	zone_cnt=1
	for p in $(zoneadm list -cp|grep -v global:) ; do
		ZONENAME=$(echo "$p"|cut -d : -f2)
		state=$(echo "$p"|cut -d : -f3)
		curlabel=$(tncfg -z $ZONENAME info label 2>/dev/null)
		if [[ $curlabel ]] ; then
			curlabel="$(echo $curlabel|cut -f2 -d=|tr " " _)"
			primary=$(tncfg -z $ZONENAME info primary|cut -d= -f2)
		else
			curlabel=...
			primary=...
		fi
		zonelist[zone_cnt]="$ZONENAME $state $primary $curlabel"
		zone_cnt+=1
	done
	ZONENAME=$(zenity --list \
	    --title="$title" \
	    --text="$msg_getzone" \
	    --height=300 \
	    --width=530 \
	    --column="Zone Name" \
	    --column="Status" \
	    --column="Primary" \
	    --column="Sensitivity Label" \
	    ${zonelist[*]} 2>/dev/null
	)

	# if the menu choice was a zonename, pop up zone menu
	if [[ -n $ZONENAME ]] ; then
		singleZone
	else
		exit
	fi
}

# Loop for single-zone menu
singleZone() {

	while (( 1 )) do
		# Clear list of commands

		console=
		label=
		start=
		reboot=
		unmount=
		stop=
		clone=
		install=
		ready=
		uninstall=
		autoboot=
		delete=
		deletenet=
		permitrelabel=

		if [ $zone_cnt -gt 1 ] ; then
			killZones="Destroy all zones...\n"
			xit="Select another zone..."
		else
			killZones=
			xit="Exit"
		fi
		if [ $ZONENAME = global ] ; then
			ldapClient="Create LDAP Client...\n"
			nscdOpt="$NSCD_OPT\n"
			createZone="Create a new zone...\n"
			addnet="Configure Network Interfaces...\n"
			unlab_template="admin_low"
			cipso_template="cipso"
			adaptive_template="adaptive"
		else
			ldapClient=
			nscdOpt=
			createZone=
			addnet=
			killZones=
			unlab_template="${ZONENAME}_unlab"
			cipso_template="${ZONENAME}_cipso"
			netif_template="${ZONENAME}_netif"
		fi

		zonestate=$(zoneadm -z $ZONENAME list -p | cut -d : -f 3)

		consoleCheck;
		labelCheck;
		delay=0

		if [ $ZONENAME != global ] ; then
			case $zonestate in
				running)
					ready="Ready\n"
					reboot="Reboot\n"
					stop="Halt\n"
					;;
				mounted)
					unmount="Unmount\n"
					;;
				ready)
					start="Boot\n"
					stop="Halt\n"
					;;
				installed)
					if [[ -z $label ]] ; then
						ready="Ready\n"
						start="Boot\n"
					fi
					uninstall="Uninstall\n"
					relabelCheck
					autobootCheck
					;;
				configured) 
					if [[ -z $label ]]; then
						install="Install...\n"
						cloneCheck
					fi
					delete="Delete\n"
					console=
					;;
				incomplete)
					uninstall="Uninstall\n"
					;;
				*)
				;;
			esac
		fi

		command=$(echo ""\
		    $createZone \
		    $console \
		    $label \
		    $start \
		    $reboot \
		    $unmount \
		    $stop \
		    $clone \
		    $install \
		    $ready \
		    $uninstall \
		    $delete \
		    $addnet \
		    $deletenet \
		    $addremotehost \
		    $addcipsohost \
		    $addauthohost \
		    $removeremotehost \
		    $removecipsohost \
		    $removeauthohost \
		    $setmlps \
		    $permitrelabel \
		    $autoboot \
		    $ldapClient \
		    $nscdOpt \
		    $killZones \
		    $xit \
		    | zenity --list \
		    --title="$title" \
		    --text="$msg_getcmd" \
		    --height=420 \
		    --width=360 \
		    --column="Zone: $ZONENAME   Status: $zonestate"  2>/dev/null)

		case $command in
		    " Create a new zone...")
			ZONENAME=
			newZone ;;

		    " Zone Console...")
			delay=2
			gnome-terminal \
			    --title="Zone Console: $ZONENAME" \
			    --command "zlogin -C $ZONENAME" & ;;

		    " Select Label...")
			selectLabel;;

		    " Ready")
			zoneadm -z $ZONENAME ready ;;

		    " Boot")
			zoneadm -z $ZONENAME boot ;;

		    " Unmount")
			zoneadm -z $ZONENAME unmount ;;

		    " Halt")
			zoneadm -z $ZONENAME halt ;;

		    " Reboot")
			zoneadm -z $ZONENAME reboot ;;

		    " Install...")
			install;;

		    " Clone...")
			clone ;;

		    " Uninstall")
			zoneadm -z $ZONENAME uninstall -F;;

		    " Delete")
			delete
			return ;;

		    " Configure Network Interfaces...")
			if [ $ZONENAME = global ] ; then
				manageNets
			else
				manageZoneNets
			fi;;	

		    " Add Single-level Access to Remote Host...")
			addTnrhdb $unlab_template ;;

		    " Add Multilevel Access to Remote Host...")
			addTnrhdb $cipso_template ;;

		    " Remove Single-level Access to Remote Host...")
			removeTnrhdb $unlab_template ;;

		    " Remove Multilevel Access to Remote Host...")
			removeTnrhdb $cipso_template ;;

		    " Add Adaptive Access for Remote Host...")
			tncfg -S files -t $adaptive_template "\
			    set host_type=adaptive"
			addTnrhdb $adaptive_template ;;

		    " Remove Adaptive Access for Remote Host...")
			removeTnrhdb $adaptive_template ;;

		    " Configure Multilevel Ports...")
			manageMLPs $mlpType;;

		    " Permit Relabeling")
			zonecfg -z $ZONENAME set limitpriv=default,\
win_mac_read,win_mac_write,win_selection,win_dac_read,win_dac_write,\
file_downgrade_sl,file_upgrade_sl,sys_trans_label ;;

		    " Deny Relabeling")
			zonecfg -z $ZONENAME set limitpriv=default ;;

		    " Set Automatic Booting")
			zonecfg -z $ZONENAME set autoboot=true ;;

		    " Set Manual Booting")
			zonecfg -z $ZONENAME set autoboot=false ;;

		    " Create LDAP Client...")
			createLDAPclient ;;

		    " Configure per-zone name service")
			manageNscd ;;

		    " Unconfigure per-zone name service")
			manageNscd ;;

		    " Destroy all zones...")
			tearDownZones
			return ;;

		    *)
			if [ $zone_cnt == 1 ] ; then
				exit
			else
				return
			fi;;
		esac
		sleep $delay;
	done
}

# Main loop for top-level window
#

/usr/sbin/tninfo 1>/dev/null 2>&1
if [ $? != 0 ] ; then
	printf "$(gettext "%s : Trusted Extensions must be enabled.\n")" "$0"
	exit 1
fi

myzone=$(/sbin/zonename)
if [ $myzone != "global" ] ; then
	printf "$(gettext "%s : must be in global zone to run.\n")" "$0"
	exit 1
fi


process_options "$@" || exit

if [ $DISP -ne 0 ] ; then
	which zenity 1>/dev/null 2>&1
	if [ $? != 0 ] ; then
        	printf "$(gettext "%s : GUI mode not available; zenity is not installed")" "$0"
        	which zenity
        	exit 1
	fi
fi

mkdir $TXTMP 2>/dev/null
deflabel="$(labelcfg info min_label|cut -d= -f2)"
DEFAULTLABEL=$(atohexlabel "${deflabel}")
intlabel="$(labelcfg info clearance|cut -d= -f2)"
INTLABEL=$(atohexlabel "${intlabel}")

# are there any zfs pools?
ZDSET=none
zpool iostat 1>/dev/null 2>&1
if [ $? = 0 ] ; then
	# is there a zfs pool named "zone"?
	zpool list -H zone 1>/dev/null 2>&1
	if [ $? = 0 ] ; then
		# yes
		ZDSET=zone
	else
		# no, but is there a root pool?
		rootfs=$(df -n / | awk '{print $3}')
		if [ $rootfs = "zfs" ] ; then
			# yes, use it
			ZDSET=$(zfs list -Ho name / | cut -d/ -f 1)/zones
			zfs list -H $ZDSET 1>/dev/null 2>&1
			if [ $? = 1 ] ; then
				createZDSET "-o mountpoint=/zone" $ZDSET
			fi
		fi
	fi
fi

if [ $DISP -eq 0 ] ; then
	gettext "non-interactive mode ...\n"

	if [[ $ZONELIST ]]; then
		createZones
		exit
	fi

	if [ $DESTROYZONES -eq 1 ] ; then
		tearDownZones
	fi

	if [ $CREATEDEF -eq 1 ] ; then
		if [[ -z $(zoneadm list -cp | grep :labeled:) ]] ; then
			createDefaultZones
		else
			gettext "cannot create default zones because there are existing zones.\n"
		fi
	fi

	exit
fi

if [ $NSCD_PER_LABEL -eq 0 ] ; then
	NSCD_OPT="Configure per-zone name service"
else
	NSCD_OPT="Unconfigure per-zone name service"
fi


while (( 1 )) do
	selectZone
done
