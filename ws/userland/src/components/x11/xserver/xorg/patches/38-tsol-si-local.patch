diff -ur os/access.c os2/access.c
--- a/os/access.c	2017-10-12 10:24:59.000000000 +0000
+++ b/os/access.c	2020-06-20 14:48:59.818647096 +0000
@@ -55,6 +55,7 @@
 
 /*
  * Copyright (c) 2004, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Dynamic Systems Inc.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the "Software"),
@@ -2083,13 +2084,14 @@
     if (GetLocalClientCreds(client, &lcc) == -1) {
         return FALSE;
     }
-
+#ifndef TSOL
 #ifdef HAVE_GETZONEID           /* Ensure process is in the same zone */
     if ((lcc->fieldsSet & LCC_ZID_SET) && (lcc->zoneid != getzoneid())) {
         FreeLocalClientCreds(lcc);
         return FALSE;
     }
 #endif
+#endif /* TSOL */
 
     if (siLocalCredGetId(siAddr, siAddrlen, lcPriv, &siAddrId) == FALSE) {
         FreeLocalClientCreds(lcc);
diff -ur os/connection.c os2/connection.c
--- a/os/connection.c	2020-06-20 14:43:16.762736048 +0000
+++ b/os/connection.c	2020-06-20 14:45:40.178299626 +0000
@@ -44,6 +44,7 @@
 
 ******************************************************************/
 /* Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Dynamic Systems Inc.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the
@@ -663,10 +664,28 @@
     trans_conn = priv->trans_conn;
 
 #ifdef TSOL
-    if (pSecHook)
+    if (pSecHook) {
         auth_id = (*pSecHook->CheckAuthorization) (proto_n, auth_proto,
                                    string_n, auth_string, client, &reason);
-    else
+        if (_XSERVTransGetPeerAddr(trans_conn, &family, &fromlen, &from) != -1) {
+	    /*
+	     * Check for SI:localuser: credentials 
+	     */
+            if (InvalidHost((struct sockaddr *) from, fromlen, client))
+		/*
+		 * Otherwise check for MIT-MAGIC-COOKIE-1
+		 */
+		auth_id = CheckAuthorization(proto_n, auth_proto, string_n, auth_string,
+	            client, &reason);
+            free(from);
+	}
+    }
+    if (auth_id == (XID) ~0L) {
+        if (reason)
+	    return reason;
+        else
+	    return "Client is not authorized to connect to Server";
+    }
 #endif /* TSOL */
 
     /* Allow any client to connect without authorization on a launchd socket,
