diff -ur tsol/tsolextension.c tsol2/tsolextension.c
--- a/tsol/tsolextension.c	2020-06-21 23:23:54.150383527 +0000
+++ b/tsol/tsolextension.c	2020-06-21 23:24:30.583694858 +0000
@@ -44,6 +43,8 @@
 #include <rpc/rpc.h>
 #include <zone.h>
 
+#include <tsol/label.h>
+
 #ifdef HAVE_DIX_CONFIG_H
 #include <dix-config.h>
 #endif
@@ -1803,7 +1804,17 @@
 		    (HasTrustedPath(tsolinfo))) {
 			auth_token = (XID)(tsolinfo->uid);
 		} else {
+			char *clientLabel;
 			auth_token = ((XID)-1);
+
+			if (label_to_str(tsolinfo->sl, &clientLabel,
+			    MAC_LABEL, DEF_NAMES) != -1) {
+				LogMessageVerb(X_DEBUG, TSOL_MSG_POLICY_DENIED,
+				    "TsolLabelCheck: Label range error,  %s\n", clientLabel);
+				free(clientLabel);
+			} else {
+				LogMessageVerb(X_ERROR, 0, "TsolLabelCheck: invalid client label\n");
+			}
 		}
 	}
 
diff -ur os/access.c os2/access.c
--- a/os/access.c	2017-10-12 17:24:59.000000000 +0000
+++ b/os/access.c	2020-06-21 23:26:35.897546369 +0000
@@ -55,6 +55,7 @@
 
 /*
  * Copyright (c) 2004, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Dynamic Systems Inc.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the "Software"),
@@ -2083,13 +2084,14 @@
     if (GetLocalClientCreds(client, &lcc) == -1) {
         return FALSE;
     }
-
+#ifndef TSOL
 #ifdef HAVE_GETZONEID           /* Ensure process is in the same zone */
     if ((lcc->fieldsSet & LCC_ZID_SET) && (lcc->zoneid != getzoneid())) {
         FreeLocalClientCreds(lcc);
         return FALSE;
     }
 #endif
+#endif /* TSOL */
 
     if (siLocalCredGetId(siAddr, siAddrlen, lcPriv, &siAddrId) == FALSE) {
         FreeLocalClientCreds(lcc);
@@ -2099,6 +2101,7 @@
     if (lcPriv->credType == LOCAL_USER) {
         if ((lcc->fieldsSet & LCC_UID_SET) && (lcc->euid == siAddrId)) {
             FreeLocalClientCreds(lcc);
+	    LogMessageVerb(X_DEBUG, 5, "siLocalCredMatch: accepted %s, uid = %d\n", siAddr, siAddrId);
             return TRUE;
         }
     }
diff -ur os/connection.c os2/connection.c
--- a/os/connection.c	2020-06-21 23:23:54.146784140 +0000
+++ b/os/connection.c	2020-06-21 23:26:55.432617645 +0000
@@ -663,13 +662,6 @@
     priv = (OsCommPtr) client->osPrivate;
     trans_conn = priv->trans_conn;
 
-#ifdef TSOL
-    if (pSecHook)
-        auth_id = (*pSecHook->CheckAuthorization) (proto_n, auth_proto,
-                                   string_n, auth_string, client, &reason);
-    else
-#endif /* TSOL */
-
     /* Allow any client to connect without authorization on a launchd socket,
        because it is securely created -- this prevents a race condition on launch */
     if (trans_conn->flags & TRANS_NOXAUTH) {
@@ -686,7 +678,22 @@
             if (InvalidHost((struct sockaddr *) from, fromlen, client))
                 AuthAudit(client, FALSE, (struct sockaddr *) from,
                           fromlen, proto_n, auth_proto, auth_id);
-            else {
+#ifdef TSOL
+            else if (pSecHook) {
+		auth_id = (*pSecHook->CheckAuthorization) (proto_n, auth_proto,
+		    string_n, auth_string, client, &reason);
+		if (auth_id == -1) {
+		    auth_id = (XID) ~0L;
+		} else {
+		    auth_id = (XID) 0;
+		}
+	    } else {
+		auth_id = (XID) 0;
+	    } 
+	    if (auth_id == (XID) ~0L)
+		LogMessageVerb(X_DEBUG, 5, "ClientAuthorized: outside label range\n");
+#endif /* TSOL */
+	    else {
                 auth_id = (XID) 0;
 #ifdef XSERVER_DTRACE
                 if ((auditTrailLevel > 1) || XSERVER_CLIENT_AUTH_ENABLED())
@@ -703,9 +710,9 @@
 
         if (auth_id == (XID) ~0L) {
             if (reason)
-                return reason;
-            else
-                return "Client is not authorized to connect to Server";
+	        return reason;
+	    else
+	        return "Client is not authorized to connect to Server";
         }
     }
 #ifdef XSERVER_DTRACE
