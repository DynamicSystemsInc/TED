*** new	2019-12-20 15:39:09.774563514 +0000
--- caja-1.22.1/libcaja-private/caja-tsol-extensions.c	2019-09-25 15:07:30.922417256 +0000
***************
*** 0 ****
--- 1,304 ----
+ /*
+  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
+  * Use is subject to license terms.
+  */
+ 
+ #include <config.h>
+ #include <X11/Xatom.h>
+ #include <gdk/gdk.h>
+ #include <gdk/gdkx.h>
+ #include <strings.h>
+ #include <zone.h>
+ #include <sys/types.h>
+ #include <unistd.h>
+ #include <tsol/label.h>
+ #include <stdlib.h>
+ #include <dlfcn.h>
+ #include <link.h>
+ 
+ #include "caja-tsol-extensions.h"
+ 
+ #define	FMGR_DESKTOP_ID "NAUTILUS_ACTIVE_DESKTOP_ID"
+ typedef int (*tsol_getlabel) (const char*, m_label_t*);
+ typedef int (*tsol_getplabel) (m_label_t*);
+ typedef m_label_t* (*tsol_blabel_alloc) (void);
+ typedef void (*tsol_blabel_free) (m_label_t*);
+ typedef int (*tsol_blequal) (m_label_t*, m_label_t*);
+ typedef int (*tsol_label_to_str) (const m_label_t*, char**,
+ 		 		  const m_label_str_t, uint_t);
+ typedef int (*tsol_str_to_label) (const char*, m_label_t**, 
+ 				  const m_label_type_t, uint_t, int*);
+ 
+ static tsol_getlabel  libtsol_getlabel = NULL;
+ static tsol_getplabel  libtsol_getplabel = NULL;
+ static tsol_label_to_str libtsol_label_to_str = NULL;
+ static tsol_str_to_label libtsol_str_to_label = NULL;
+ static tsol_blabel_alloc libtsol_blabel_alloc = NULL;
+ static tsol_blabel_free libtsol_blabel_free = NULL;
+ static tsol_blequal libtsol_blequal = NULL;
+ 
+ static gboolean
+ init_tsol () 
+ {
+ 	static gboolean tsol_init = FALSE;
+ 	gpointer handle = NULL;
+ 
+ 	if (!tsol_init) {
+ 		if (handle = dlopen ("/usr/lib/amd64/libtsol.so.2", RTLD_LAZY)) {
+ 			libtsol_getlabel = (tsol_getlabel) dlsym (handle,
+ 							"getlabel");
+ 			libtsol_getplabel = (tsol_getplabel) dlsym (handle,
+ 							"getplabel");
+ 			libtsol_label_to_str = (tsol_label_to_str)dlsym (handle,
+ 							"label_to_str");
+ 			libtsol_str_to_label = (tsol_str_to_label)dlsym (handle,
+ 							"str_to_label");
+ 			libtsol_blabel_alloc = (tsol_blabel_alloc)dlsym (handle,
+ 							"blabel_alloc");
+ 			libtsol_blabel_free = (tsol_blabel_free)dlsym (handle,
+ 							"blabel_free");
+ 			libtsol_blequal = (tsol_blequal) dlsym (handle, 
+ 							"blequal");
+ 		}
+ 		tsol_init = TRUE;
+ 	}
+ 
+ 	if (!libtsol_getlabel || !libtsol_getplabel || !libtsol_blabel_alloc ||
+ 	    !libtsol_blabel_free || !libtsol_label_to_str || !libtsol_blequal ||
+ 	    !libtsol_str_to_label) {
+ 		return FALSE;
+ 	}
+ 	
+ 	return TRUE;
+ }
+ 
+ char*
+ caja_tsol_get_process_label (void)
+ {
+ 	char *label_str;
+ 	m_label_t *label = NULL; 
+ 
+ 	if (init_tsol ()) {
+ 		label = libtsol_blabel_alloc ();
+ 		if (libtsol_getplabel (label) == -1) {
+ 			label_str = NULL;
+ 		} else if (libtsol_label_to_str (label, &label_str, M_LABEL, 
+ 					 	DEF_NAMES)) {
+ 			label_str = NULL;
+ 		}
+ 
+ 		libtsol_blabel_free (label);
+ 
+ 		return label_str;
+ 	} else {
+ 		return NULL;
+ 	}
+ }
+ 
+ char*
+ caja_tsol_get_file_label (const char *uri)
+ {
+ 	char *label_str;
+ 	m_label_t *label;
+ 	char *path;
+ 
+ 	if (init_tsol () && strncmp (uri, "file://", 7) == 0) {
+ 		label = libtsol_blabel_alloc ();
+ 		path = g_strdup (uri + 7);
+ 		if (libtsol_getlabel (path, label) == -1) {
+ 			label_str =  NULL;
+ 		} else if (libtsol_label_to_str (label, &label_str, M_LABEL, 
+ 					 	 LONG_NAMES)) {
+ 			label_str = NULL;
+ 		}
+ 		g_free (path);
+ 	
+ 		libtsol_blabel_free (label);
+ 	
+ 		return label_str;
+ 	} else {
+ 		return g_strdup ("ADMIN_LOW");
+ 	}
+ }
+ 
+ gboolean 
+ caja_tsol_label_equal_to_process_label (char *label_str) 
+ {
+ 	gboolean ret = TRUE;
+ 	m_label_t *plabel = NULL, *label = NULL;
+ 	int error;
+ 
+ 	if (init_tsol ()) {
+ 		plabel = libtsol_blabel_alloc ();
+ 		label =  libtsol_blabel_alloc ();
+ 
+ 		if (libtsol_getplabel (plabel) == -1) {
+ 			ret = TRUE;
+ 		} else if (libtsol_str_to_label (label_str, &label, MAC_LABEL,
+ 						 L_NO_CORRECTION, &error) ==-1){
+ 			ret = TRUE;
+ 		} else if (libtsol_blequal (plabel, label)) {
+ 			ret = TRUE;
+ 		} else {
+ 			ret = FALSE;
+ 		}
+ 
+ 		libtsol_blabel_free (plabel);
+ 		libtsol_blabel_free (label);
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ gboolean
+ caja_tsol_multi_label_session (void) 
+ {
+ 	static int trusted = -1;
+ 
+ 	if (trusted < 0) {
+ 		if (getenv ("TRUSTED_SESSION")) {
+ 			trusted = 1;
+ 		} else {
+ 			trusted = 0;
+ 		}
+ 	}
+ 
+ 	return trusted ? TRUE : FALSE;
+ }
+ 
+ static char*
+ caja_tsol_get_active_desktop_id (void) 
+ {
+ 	static char *dwid = NULL;
+ 	uid_t uid;
+ 	zoneid_t zid;
+ 
+ 	if (!dwid) {
+ 		uid = getuid();
+ 		zid = getzoneid();
+ 		dwid = g_strdup_printf ("%d_%d", uid, zid);
+ 	}
+ 
+ 	return dwid;
+ }
+ 
+ gboolean
+ caja_tsol_show_desktop_window (GdkScreen *screen)
+ {
+ 	char *dwid;
+ 	int format;
+ 	unsigned long nitems;
+ 	unsigned long bytesafter;
+ 	char *prop_data = NULL;
+ 	char *p;
+ 	int i, n_strings;
+ 	Atom atom, utf8_string;
+ 	Atom type = None;
+ 	Window root_win;
+ 	char **contents;
+ 	GdkDisplay *gdk_dpy = gdk_display_get_default ();
+ 	Display *x_dpy = GDK_DISPLAY_XDISPLAY (gdk_dpy);
+ 
+ 	root_win = GDK_WINDOW_XID (gdk_screen_get_root_window (screen));
+ 
+ 	utf8_string = XInternAtom (x_dpy, "UTF8_STRING", FALSE);
+ 	dwid = caja_tsol_get_active_desktop_id ();
+ 	atom = XInternAtom (x_dpy, FMGR_DESKTOP_ID, FALSE);
+ 
+ 	if (XGetWindowProperty (x_dpy, root_win, atom, 0L, (long)1024, False,
+ 				utf8_string, &type, &format, &nitems, 
+ 				&bytesafter, (unsigned char **)&prop_data) 
+ 				!= Success) {
+ 		return FALSE;
+ 	}
+ 
+ 	if (type != utf8_string || format != 8 || nitems == 0) {
+ 		if (prop_data) {
+ 			XFree (prop_data);
+ 		}
+ 		return FALSE;
+ 	}
+ 
+ 	i = 0;
+ 	n_strings = 0;
+ 	while (i < nitems) {
+ 		if (prop_data[i] == '\0') {
+ 			++n_strings;
+ 		}
+ 		++i;
+ 	}
+ 
+ 	if (prop_data[nitems -1] != '/0') {
+ 		++n_strings;
+ 	}
+ 
+ 	contents = g_new0 (char *, n_strings+1);
+ 
+ 	p = prop_data;
+ 	i = 0;
+ 	while (i < n_strings) {
+ 		if (!g_utf8_validate ((const gchar *)p, -1, NULL)) {
+ 			g_warning ("Property contained invalid utf8\n");
+ 			XFree (prop_data);
+ 			g_strfreev (contents);
+ 			return FALSE;
+ 		}
+ 		contents[i] = g_strdup (p);
+ 		p = p + strlen (p) +1;
+ 		++i;
+ 	}
+ 
+ 	if (prop_data) XFree (prop_data);
+ 
+ 	if (strcmp (contents[0], dwid) == 0) {
+ 		return TRUE;
+ 	} else {
+ 		return FALSE;
+ 	}
+ }
+ 
+ GdkFilterReturn
+ caja_tsol_filter_func (GdkXEvent *gdkxevent, GdkEvent *event, gpointer data)
+ {
+ 	Atom atom;
+ 	XEvent *xevent = gdkxevent;
+ 	GtkWidget *widget = (GtkWidget *)data;
+ 	GdkScreen *screen = gtk_widget_get_screen (widget);
+ 	GdkDisplay *gdk_dpy = gdk_display_get_default ();
+ 	Display *x_dpy = GDK_DISPLAY_XDISPLAY (gdk_dpy);
+ 
+ 	if (xevent->type != PropertyNotify) {
+ 		return GDK_FILTER_CONTINUE;
+ 	}
+ 
+ 	atom = XInternAtom (x_dpy, FMGR_DESKTOP_ID, FALSE);
+ 
+ 	if (xevent->xproperty.atom != atom) {
+ 		return GDK_FILTER_CONTINUE;
+ 	}
+ 
+ 	if (caja_tsol_show_desktop_window (screen)) {
+ 		gtk_widget_show (widget);
+ 	} else {
+ 		gtk_widget_hide (widget);
+ 	}
+ 
+ 	return GDK_FILTER_CONTINUE;
+ }
+ 
+ void
+ caja_tsol_update_paste_location_property (GtkClipboard *cb,
+ 		const unsigned char *dir)
+ {
+ 	GtkWidget *widget = g_object_get_data (gtk_clipboard_get_display (cb),
+ 					       "gtk-clipboard-widget");
+ 	Display *x_dpy = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (widget));
+ 	Atom atom = XInternAtom (x_dpy, "_CAJA_TARGET_DIR", FALSE);
+ 	Atom utf8 = XInternAtom (x_dpy, "UTF8_STRING", FALSE);
+ 	Window win = GDK_WINDOW_XID (gtk_widget_get_window(widget));
+ 	
+ 	XChangeProperty (x_dpy, win, atom, utf8, 8, PropModeReplace, dir, 
+ 			 strlen (dir));
+ 	
+ 	XSync (x_dpy, FALSE);
+ }
