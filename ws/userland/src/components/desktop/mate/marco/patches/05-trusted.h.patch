*** new	2019-12-19 14:59:00.312077888 +0000
--- marco-1.22.1/src/core/trusted.h	2019-09-17 16:24:58.581147673 +0000
***************
*** 0 ****
--- 1,184 ----
+ /* Marco trusted */
+ 
+ /* 
+  * Copyright (C) 2005 Erwann Chenede
+  */
+ 
+ #ifndef TRUSTED_H
+ #define TRUSTED_H
+ 
+ #ifdef HAVE_XTSOL
+ #include "display.h"
+ #include "display-private.h"
+ #include <gdk/gdk.h>
+ #include <gtk/gtk.h>
+ #include "trusted-pics.h"
+ #include <X11/extensions/Xtsol.h>
+ #include <sys/tsol/label_macro.h>
+ /* #include "constraint-scaling.h" */
+ 
+ typedef struct _ConstraintImage ConstraintImage;
+ struct _ConstraintImage
+ {
+   gchar     *filename;
+   GdkPixbuf *pixbuf;
+   GdkPixbuf *scaled;
+   gboolean   stretch;
+   gint       border_left;
+   gint       border_right;
+   gint       border_bottom;
+   gint       border_top;
+   guint      hints[3][3];
+   gboolean   recolorable;
+   GdkColor   colorize_color;
+   gboolean   use_as_bkg_mask;
+ };
+ 
+ /* dlopened libtsol functions */
+ 
+ typedef int     (*tsol_label_to_str) (const m_label_t *label, char **string,
+ 				      const m_label_str_t conversion_type, uint_t flags,
+ 				      int *error);
+ typedef int	(*tsol_str_to_label) (const char *string, m_label_t **label,
+ 				      const m_label_type_t label_type, uint_t flags,
+ 				      int *error);
+ typedef void	(*tsol_m_label_free) (m_label_t *label);
+ 
+ typedef blrange_t*  (*tsol_getuserrange) (const char *username);
+ typedef int	    (*tsol_blinrange)	 (const m_label_t *label,
+ 					  const blrange_t *range);
+ typedef void	    (*tsol_blminimum)	 (m_label_t *minimum_label,
+ 					  const m_label_t *bounding_label);
+ typedef void	    (*tsol_blmaximum)	 (m_label_t *maximum_label,
+ 					  const m_label_t *bounding_label);
+ typedef m_label_t*  (*tsol_blabel_alloc) (void);
+ typedef void	    (*tsol_blabel_free)  (m_label_t *label_p);
+ typedef void	    (*tsol_bsllow)	 (m_label_t *label);
+ typedef void	    (*tsol_bslhigh)	 (m_label_t *label);
+ 
+ 
+ typedef void  (*gnome_tsol_constraint_image_render) (cairo_t *cr,
+ 						     ConstraintImage *cimage,
+ 						     GdkWindow    *window,
+ 						     GdkRectangle *clip_rect,
+ 						     gboolean      center,		   
+ 						     gint          x,
+ 						     gint          y,
+ 						     gint          width,
+ 						     gint          height);
+ 
+ typedef void (*gnome_tsol_constraint_image_set_border) (ConstraintImage *pb,
+ 							gint         left,
+ 							gint         right,
+ 							gint         top,
+ 							gint         bottom);
+ 
+ typedef void (*gnome_tsol_constraint_image_set_stretch) (ConstraintImage *pb,
+ 							 gboolean     stretch);
+ 
+ typedef void (*gnome_tsol_constraint_image_colorize) (ConstraintImage *image,
+ 						      GdkColor  *color,
+ 						      int	alpha,
+ 						      gboolean   use_alpha);
+ 
+ /* dlopened libXtsol functions */
+ typedef Status	(*xtsol_XTSOLgetClientLabel) (Display *dpy, 
+ 					      XID xid,
+ 					      bslabel_t *sl);
+ typedef Bool    (*xtsol_XTSOLIsWindowTrusted) (Display *dpy, 
+ 					       Window win);
+ 
+ typedef Status (*xtsol_XTSOLsetResLabel) (Display *dpy,
+ 					  XID object,
+ 					  ResourceType resourceFlag,
+ 					  bslabel_t *sl);
+ typedef Status (*xtsol_XTSOLsetResUID) (Display *dpy,
+ 					XID object,
+ 					ResourceType resourceFlag,
+ 					uid_t *uidp);
+ 
+ typedef Status (*xtsol_XTSOLgetResLabel) (Display *dpy,
+ 					   XID object,
+ 					   ResourceType resourceFlag,
+ 					   bslabel_t *sl);
+ 
+ typedef Status (*xtsol_XTSOLgetResUID) (Display *dpy,
+ 					XID object,
+ 					ResourceType resourceFlag,
+ 					uid_t *uidp);
+ 
+ /* libbsm provides getdevicerange(3TSOL) - don't believe the man page */
+ typedef blrange_t*      (*bsm_getdevicerange) (const char *device);
+ 
+ 
+ tsol_label_to_str	libtsol_label_to_str;
+ tsol_str_to_label	libtsol_str_to_label;
+ tsol_m_label_free	libtsol_m_label_free;
+ tsol_blminimum		libtsol_blminimum;
+ tsol_blmaximum		libtsol_blmaximum;
+ tsol_blinrange		libtsol_blinrange;
+ tsol_getuserrange	libtsol_getuserrange;
+ tsol_blabel_alloc	libtsol_blabel_alloc;
+ tsol_blabel_free	libtsol_blabel_free;
+ tsol_bsllow		libtsol_bsllow;
+ tsol_bslhigh		libtsol_bslhigh;
+ /* libbsm functions */
+ bsm_getdevicerange      libbsm_getdevicerange;
+ 
+ gnome_tsol_constraint_image_render libgnome_tsol_constraint_image_render;
+ gnome_tsol_constraint_image_set_border libgnome_tsol_constraint_image_set_border;
+ gnome_tsol_constraint_image_set_stretch libgnome_tsol_constraint_image_set_stretch;
+ gnome_tsol_constraint_image_colorize libgnome_tsol_constraint_image_colorize;
+ 
+ xtsol_XTSOLgetClientLabel	libxtsol_XTSOLgetClientLabel;
+ xtsol_XTSOLIsWindowTrusted	libxtsol_XTSOLIsWindowTrusted;
+ 
+ xtsol_XTSOLsetResLabel		libxtsol_XTSOLsetResLabel;
+ xtsol_XTSOLgetResLabel		libxtsol_XTSOLgetResLabel;
+ xtsol_XTSOLsetResUID		libxtsol_XTSOLsetResUID;
+ xtsol_XTSOLgetResUID		libxtsol_XTSOLgetResUID;
+ 
+ gboolean tsol_is_available (void);
+ gboolean tsol_use_trusted_extensions (void);
+ 
+ /* Marco functions */
+ 
+ void		      tsol_trusted_stripe_atom_update (MetaDisplay *display, 
+ 						       MetaWindow  *window);
+ gboolean tsol_meta_workspace_has_role (MetaWorkspace *ws);
+ char * tsol_meta_workspace_get_role (MetaWorkspace *ws);
+ 
+ 
+ gboolean tsol_meta_window_can_move_to_workspace (MetaWindow    *win,
+ 						 MetaWorkspace *ws);
+ 
+ gboolean tsol_xwindow_can_move_to_workspace (Display *display,
+ 					     Window   xwin,
+ 					     int      ws_index);
+ 
+ gboolean tsol_meta_screen_use_roles (MetaScreen *screen);
+ GList*	 tsol_add_all_sticky_non_tp_windows (MetaDisplay *display,
+ 					     GList	 *win_list);
+ 
+ void tsol_workspace_labels_atom_set (MetaScreen *screen);
+ void tsol_workspace_roles_atom_set (MetaScreen *screen);
+ 
+ 	
+ void tsol_workspace_labels_gconf_update (MetaScreen *screen);
+ void tsol_workspace_roles_gconf_update (MetaScreen *screen);
+ 
+ gboolean	tsol_label_is_in_user_range (const char * label);
+ const char     *tsol_label_get_min ();
+ const char     *tsol_label_get_max ();
+ const char     *tsol_meta_window_label_get_name(MetaWindow *window);
+ 
+ gboolean tsol_label_is_in_role_range (const char * label, 
+ 				      const char * username, 
+ 				      char *min_role_label);
+ 
+ ConstraintImage * tsol_get_highlight_stripe (char     *name,
+ 					     GdkColor *label_color);
+ 
+ void tsol_set_frame_label (Display* xdpy, Window xwin, Window xwin_frame);
+ #endif /*HAVE_XTSOL*/
+ #endif /*TRUSTED_H*/
