/*
 * Generated by gdbus-codegen 2.59.2 from notificationdaemon.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __MND_DBUS_GENERATED_H__
#define __MND_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Notifications */

#define NOTIFY_DAEMON_TYPE_NOTIFICATIONS (notify_daemon_notifications_get_type ())
#define NOTIFY_DAEMON_NOTIFICATIONS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS, NotifyDaemonNotifications))
#define NOTIFY_DAEMON_IS_NOTIFICATIONS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS))
#define NOTIFY_DAEMON_NOTIFICATIONS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS, NotifyDaemonNotificationsIface))

struct _NotifyDaemonNotifications;
typedef struct _NotifyDaemonNotifications NotifyDaemonNotifications;
typedef struct _NotifyDaemonNotificationsIface NotifyDaemonNotificationsIface;

struct _NotifyDaemonNotificationsIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_close_notification) (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation,
    guint arg_id);

  gboolean (*handle_get_capabilities) (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_server_information) (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_notify) (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_name,
    guint arg_id,
    const gchar *arg_icon,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *const *arg_actions,
    GVariant *arg_hints,
    gint arg_timeout);

  void (*action_invoked) (
    NotifyDaemonNotifications *object,
    guint arg_id,
    const gchar *arg_action_key);

  void (*notification_closed) (
    NotifyDaemonNotifications *object,
    guint arg_id,
    guint arg_reason);

};

GType notify_daemon_notifications_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *notify_daemon_notifications_interface_info (void);
guint notify_daemon_notifications_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void notify_daemon_notifications_complete_notify (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation,
    guint return_id);

void notify_daemon_notifications_complete_close_notification (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation);

void notify_daemon_notifications_complete_get_capabilities (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *return_caps);

void notify_daemon_notifications_complete_get_server_information (
    NotifyDaemonNotifications *object,
    GDBusMethodInvocation *invocation,
    const gchar *return_name,
    const gchar *return_vendor,
    const gchar *return_version,
    const gchar *return_spec_version);



/* D-Bus signal emissions functions: */
void notify_daemon_notifications_emit_action_invoked (
    NotifyDaemonNotifications *object,
    guint arg_id,
    const gchar *arg_action_key);

void notify_daemon_notifications_emit_notification_closed (
    NotifyDaemonNotifications *object,
    guint arg_id,
    guint arg_reason);



/* D-Bus method calls: */
void notify_daemon_notifications_call_notify (
    NotifyDaemonNotifications *proxy,
    const gchar *arg_app_name,
    guint arg_id,
    const gchar *arg_icon,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *const *arg_actions,
    GVariant *arg_hints,
    gint arg_timeout,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean notify_daemon_notifications_call_notify_finish (
    NotifyDaemonNotifications *proxy,
    guint *out_return_id,
    GAsyncResult *res,
    GError **error);

gboolean notify_daemon_notifications_call_notify_sync (
    NotifyDaemonNotifications *proxy,
    const gchar *arg_app_name,
    guint arg_id,
    const gchar *arg_icon,
    const gchar *arg_summary,
    const gchar *arg_body,
    const gchar *const *arg_actions,
    GVariant *arg_hints,
    gint arg_timeout,
    guint *out_return_id,
    GCancellable *cancellable,
    GError **error);

void notify_daemon_notifications_call_close_notification (
    NotifyDaemonNotifications *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean notify_daemon_notifications_call_close_notification_finish (
    NotifyDaemonNotifications *proxy,
    GAsyncResult *res,
    GError **error);

gboolean notify_daemon_notifications_call_close_notification_sync (
    NotifyDaemonNotifications *proxy,
    guint arg_id,
    GCancellable *cancellable,
    GError **error);

void notify_daemon_notifications_call_get_capabilities (
    NotifyDaemonNotifications *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean notify_daemon_notifications_call_get_capabilities_finish (
    NotifyDaemonNotifications *proxy,
    gchar ***out_return_caps,
    GAsyncResult *res,
    GError **error);

gboolean notify_daemon_notifications_call_get_capabilities_sync (
    NotifyDaemonNotifications *proxy,
    gchar ***out_return_caps,
    GCancellable *cancellable,
    GError **error);

void notify_daemon_notifications_call_get_server_information (
    NotifyDaemonNotifications *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean notify_daemon_notifications_call_get_server_information_finish (
    NotifyDaemonNotifications *proxy,
    gchar **out_return_name,
    gchar **out_return_vendor,
    gchar **out_return_version,
    gchar **out_return_spec_version,
    GAsyncResult *res,
    GError **error);

gboolean notify_daemon_notifications_call_get_server_information_sync (
    NotifyDaemonNotifications *proxy,
    gchar **out_return_name,
    gchar **out_return_vendor,
    gchar **out_return_version,
    gchar **out_return_spec_version,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NOTIFY_DAEMON_TYPE_NOTIFICATIONS_PROXY (notify_daemon_notifications_proxy_get_type ())
#define NOTIFY_DAEMON_NOTIFICATIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_PROXY, NotifyDaemonNotificationsProxy))
#define NOTIFY_DAEMON_NOTIFICATIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_PROXY, NotifyDaemonNotificationsProxyClass))
#define NOTIFY_DAEMON_NOTIFICATIONS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_PROXY, NotifyDaemonNotificationsProxyClass))
#define NOTIFY_DAEMON_IS_NOTIFICATIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_PROXY))
#define NOTIFY_DAEMON_IS_NOTIFICATIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_PROXY))

typedef struct _NotifyDaemonNotificationsProxy NotifyDaemonNotificationsProxy;
typedef struct _NotifyDaemonNotificationsProxyClass NotifyDaemonNotificationsProxyClass;
typedef struct _NotifyDaemonNotificationsProxyPrivate NotifyDaemonNotificationsProxyPrivate;

struct _NotifyDaemonNotificationsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NotifyDaemonNotificationsProxyPrivate *priv;
};

struct _NotifyDaemonNotificationsProxyClass
{
  GDBusProxyClass parent_class;
};

GType notify_daemon_notifications_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NotifyDaemonNotificationsProxy, g_object_unref)
#endif

void notify_daemon_notifications_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NotifyDaemonNotifications *notify_daemon_notifications_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NotifyDaemonNotifications *notify_daemon_notifications_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void notify_daemon_notifications_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NotifyDaemonNotifications *notify_daemon_notifications_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NotifyDaemonNotifications *notify_daemon_notifications_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NOTIFY_DAEMON_TYPE_NOTIFICATIONS_SKELETON (notify_daemon_notifications_skeleton_get_type ())
#define NOTIFY_DAEMON_NOTIFICATIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_SKELETON, NotifyDaemonNotificationsSkeleton))
#define NOTIFY_DAEMON_NOTIFICATIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_SKELETON, NotifyDaemonNotificationsSkeletonClass))
#define NOTIFY_DAEMON_NOTIFICATIONS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_SKELETON, NotifyDaemonNotificationsSkeletonClass))
#define NOTIFY_DAEMON_IS_NOTIFICATIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_SKELETON))
#define NOTIFY_DAEMON_IS_NOTIFICATIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NOTIFY_DAEMON_TYPE_NOTIFICATIONS_SKELETON))

typedef struct _NotifyDaemonNotificationsSkeleton NotifyDaemonNotificationsSkeleton;
typedef struct _NotifyDaemonNotificationsSkeletonClass NotifyDaemonNotificationsSkeletonClass;
typedef struct _NotifyDaemonNotificationsSkeletonPrivate NotifyDaemonNotificationsSkeletonPrivate;

struct _NotifyDaemonNotificationsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NotifyDaemonNotificationsSkeletonPrivate *priv;
};

struct _NotifyDaemonNotificationsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType notify_daemon_notifications_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NotifyDaemonNotificationsSkeleton, g_object_unref)
#endif

NotifyDaemonNotifications *notify_daemon_notifications_skeleton_new (void);


G_END_DECLS

#endif /* __MND_DBUS_GENERATED_H__ */
